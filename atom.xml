<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Audrey Li's Personal Blog</title>
 <link href="localhost:4000/atom.xml" rel="self"/>
 <link href="localhost:4000/"/>
 <updated>2015-09-26T19:33:55-07:00</updated>
 <id>localhost:4000</id>
 <author>
   <name>Audrey Li</name>
   <email>me@audreyli.me</email>
 </author>

 
 <entry>
   <title>A Design Pattern Story in Swift – Chapter 21: Interpretor</title>
   <link href="localhost:4000/2015/07/18/a-design-pattern-story-in-swift-chapter-21-interpretor/"/>
   <updated>2015-07-18T00:00:00-07:00</updated>
   <id>localhost:4000/2015/07/18/a-design-pattern-story-in-swift-chapter-21-interpretor</id>
   <content type="html">&lt;p&gt;An interpreter translate our plain language expression into information and find out what we need. Here we have a  Unit Interpretor (Conversion Context) who does very diverse interpretation jobs.
&amp;lt;!&amp;ndash; more &amp;ndash;&amp;gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;enum UnitType: String {
    case Gallon = &amp;quot;Gallon&amp;quot;
    case Pint = &amp;quot;Pint&amp;quot;
    case Cup = &amp;quot;Cup&amp;quot;
    case USD = &amp;quot;USD&amp;quot;
    case RMB = &amp;quot;RMB&amp;quot;
    case EURO = &amp;quot;EURO&amp;quot;
    case Meter = &amp;quot;Meter&amp;quot;
    case Unkonwn = &amp;quot;Unknown&amp;quot;
    init(str: String) {
        switch str {
            case &amp;quot;Gallon&amp;quot;, &amp;quot;Gallons&amp;quot;, &amp;quot;gallons&amp;quot;: self = .Gallon
            case &amp;quot;Pint&amp;quot;, &amp;quot;Pints&amp;quot;, &amp;quot;pints&amp;quot;: self = .Pint
            case &amp;quot;Cup&amp;quot;, &amp;quot;Cups&amp;quot;, &amp;quot;cups&amp;quot;: self = .Cup
            case &amp;quot;USD&amp;quot;, &amp;quot;usd&amp;quot;, &amp;quot;Usd&amp;quot;: self = .USD
            case &amp;quot;EURO&amp;quot;, &amp;quot;euro&amp;quot;, &amp;quot;Euro&amp;quot;: self = .EURO
            case &amp;quot;RMB&amp;quot;, &amp;quot;rmb&amp;quot;, &amp;quot;Rmb&amp;quot;: self = .RMB
        default: self = .Unkonwn
        }
    }
}
protocol Expression {
    func getUnit(quantity: Double, targetUnit: String) -&amp;amp;gt; Double
}
class Gallon: NSObject, Expression {
    func getUnit(quantity: Double, targetUnit: String) -&amp;amp;gt; Double {
        let targetUnitType = UnitType(str: targetUnit)
        switch targetUnitType {
        case .Gallon: return quantity
        case .Pint: return quantity * 8
        case .Cup: return quantity * 16
        default:
            print(&amp;quot;conversion not supported&amp;quot;)
            return -1 // just saying it&amp;#39;s a wrong number
        }
    }
}
class Pint: NSObject, Expression {
    func getUnit(quantity: Double, targetUnit: String) -&amp;amp;gt; Double {
        let targetUnitType = UnitType(str: targetUnit)
        switch targetUnitType {
        case .Gallon: return quantity * 0.125
        case .Pint: return quantity
        case .Cup: return quantity * 2
        default:
            print(&amp;quot;conversion not supported&amp;quot;)
            return -1
        }
        
    }
}
class USD: NSObject, Expression {
    func getUnit(quantity: Double, targetUnit: String) -&amp;amp;gt; Double {
        let targetUnitType = UnitType(str: targetUnit)
        switch targetUnitType {
        case .USD: return quantity
        case .EURO: return quantity * 0.92
        case .RMB: return quantity * 6.21
        default:
            print(&amp;quot;conversion not supported&amp;quot;)
            return -1
        }
        
    }
}

class RMB: NSObject, Expression {
    func getUnit(quantity: Double, targetUnit: String) -&amp;amp;gt; Double {

        let targetUnitType = UnitType(str: targetUnit)
        switch targetUnitType {
        case .USD: return quantity * 0.16
        case .EURO: return quantity * 0.15
        case .RMB: return quantity
        default:
            print(&amp;quot;conversion not supported&amp;quot;)
            return -1
        }
    }
}

struct AppConfig {
    static let AppName = &amp;quot;interpretor&amp;quot;
}
// The context to translate a sentence into related command and get the result.
class ConversionContext {
    static let sharedInstance = ConversionContext()
    private func getTargetQuantity(fromConversion: String, toConversion: String, quantity: Double) -&amp;amp;gt; Double {
        if fromConversion != &amp;quot;&amp;quot; {
            let classStr = UnitType(str: fromConversion).rawValue
            guard let anyObjecType : AnyObject.Type = NSClassFromString(&amp;quot;\(AppConfig.AppName).\(classStr)&amp;quot;)
                else {
                    if classStr == &amp;quot;EURO&amp;quot; || classStr == &amp;quot;Cup&amp;quot; {
                        return -1
                    } else {
                        return -3
                    }
            }
            let nsObjecType : NSObject.Type = anyObjecType as! NSObject.Type
            
            guard let object = nsObjecType() as? Expression else {return -4 }
            return  object.getUnit(quantity, targetUnit: toConversion)
        
        }
        return -2
    }
    func getConversionFromInput(input:String) -&amp;amp;gt; String {
        let partsOfQues = input.componentsSeparatedByString(&amp;quot; &amp;quot;)
        let fromConversion = partsOfQues[1]
        let toConversion = partsOfQues[3]
        let quantity = Double(partsOfQues[0])!
        
        let targetQuantity = getTargetQuantity(fromConversion, toConversion: toConversion, quantity: quantity)
        switch targetQuantity {
        case -1: return &amp;quot;Currently we only support conversion from RMB, USD, Gallon and Pint. \(fromConversion) is not supported&amp;quot;
        case -3: return &amp;quot;We can&amp;#39;t recognize your input yet. Try something like RMB, rmb, Gallon, Gallons...&amp;quot;
        case -2: return &amp;quot;Sorry, we couldn&amp;#39;t identify the source conversion. Try something like [ 10 Gallons to Pints ]&amp;quot;
        case -4: return &amp;quot;Couldn&amp;#39;t convert. The object we created doesn&amp;#39;t conform with Expression protocol&amp;quot;
        case let x where x &amp;amp;gt;= 0 :  return &amp;quot;\(partsOfQues[0]) \(partsOfQues[1]) equals \(targetQuantity) \(partsOfQues[3])&amp;quot;
        default: return &amp;quot;Some other unknow error happened &amp;quot;
        }
    }
}

func getOutput(input: String) -&amp;amp;gt; String {
    print(&amp;quot;Getting user input:[ \(input) ]&amp;quot;)
    let context = ConversionContext.sharedInstance
    return context.getConversionFromInput(input)
}

// Testing. User inputs a sentence and the conversionContext will translate it
let userInput = [
    &amp;quot;10 Gallons is Pints&amp;quot;,
    &amp;quot;231 Gallo is Pints&amp;quot;,
    &amp;quot;32.11 Pints in Gallon&amp;quot;,
    &amp;quot;2001.99 USD to RMB&amp;quot;,
    &amp;quot;984.2323 rmb in EURO&amp;quot;,
    &amp;quot;23 Euro in RMB&amp;quot;
]
userInput.map{ print(&amp;quot;Output: [ \(getOutput($0)) ] \n&amp;quot;) }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/interpretor.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1086&quot; src=&quot;/assets/wp-content/uploads/2015/07/interpretor.png&quot; alt=&quot;interpretor&quot; width=&quot;693&quot; height=&quot;290&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;p class=&quot;p1&quot;&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift – Chapter 20: Mediator</title>
   <link href="localhost:4000/2015/07/18/a-design-pattern-story-in-swift-chapter-20-mediator/"/>
   <updated>2015-07-18T00:00:00-07:00</updated>
   <id>localhost:4000/2015/07/18/a-design-pattern-story-in-swift-chapter-20-mediator</id>
   <content type="html">&lt;div class=&quot;page&quot; title=&quot;Page 414&quot;&gt;
  &lt;div class=&quot;layoutArea&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;
      &lt;p class=&quot;p1&quot;&gt;
        &lt;span class=&quot;s1&quot;&gt; Artists paint, musicians compose, different jobs for different pros.  It&amp;#8217;s not easy for a person to find a pro directly to do a job without some sort of agent in the middle, and even harder for a pro to find a client among all the people.  A command mediator (aka. command dispatch center) takes all the burden away. It can process task according to the task requirement such as:&lt;/span&gt;
      &lt;/p&gt;
      
      &lt;ul&gt;
        &lt;li class=&quot;p1&quot;&gt;
          Group task will be sent to all the pros who can do the jobs
        &lt;/li&gt;
        &lt;li class=&quot;p1&quot;&gt;
          Normal task will be sent to the appropriate pros and get their quotations
        &lt;/li&gt;
        &lt;li class=&quot;p1&quot;&gt;
          Once the user has chosen the pro based on the quotations, the mediator will send the task to the chosen pro
        &lt;/li&gt;
        &lt;li class=&quot;p1&quot;&gt;
          Upon getting the work back from the pro, the mediator will send the work to the customer for confirmation
        &lt;/li&gt;
      &lt;/ul&gt;
      
      &lt;p&gt;
        The mediator pattern simplifies peer-to-peer communication between objects by introducing a mediator object that acts as a communications broker between the objects. Instead of having to keep track of and communicate with of all of its peers individually, an object just deals with the mediator.  &lt;em&gt;&lt;a href=&quot;http://www.apress.com/9781484203958&quot;&gt;Design Pattern in Swift&lt;/a&gt;&lt;/em&gt;
      &lt;/p&gt;
      
      
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;typealias CommandBlock = CommandPeer -&amp;amp;gt; Any
enum ProType: String {
    case Artist = &amp;quot;Artist&amp;quot;
    case Musician = &amp;quot;Musician&amp;quot;
    case PartyPlanner = &amp;quot;Party Planner&amp;quot;
    case Other = &amp;quot;Other skills&amp;quot;
    case None = &amp;quot;No registered skills&amp;quot;
}
enum TaskStatus: String {
    case S0_Created = &amp;quot;Task Created&amp;quot;
    case S1_Submited = &amp;quot;Task Submitted&amp;quot;
    case S2_BroadCasted = &amp;quot;Task sent to pros&amp;quot;
    case S3_QuoteGathered = &amp;quot;Gathered quotes from pros&amp;quot;
    case S4_ProChosen = &amp;quot;Customer has chosen the pro to work with&amp;quot;
    case S5_SendToPro = &amp;quot;Task Center has sent the task to the pro&amp;quot;
    case S6_ProFinished = &amp;quot;Pro has finished the task&amp;quot;
    case S7_CustomConfirmWork = &amp;quot;Customer has confirmed the finished work&amp;quot;
    case Unknown = &amp;quot;Some unknown state&amp;quot;
}
// To make it simply, a customer and a pro are both command peers. They can initiate a task as a customer or finish a task as a pro.
protocol CommandPeer: CustomStringConvertible {
    var name:String { get }
    var tasks:[Task] { get set }
    var works:[Task] { get set }
    var isPro: Bool { get }
    var proType: ProType { get }

    func choosePro(var task: Task) -&amp;amp;gt; Task
    func confirmWork(var task: Task) -&amp;amp;gt; Task
    func submitQuote(task: Task) -&amp;amp;gt; (name: String, price: Int, message: String)
    func finishTask(var task: Task) -&amp;amp;gt; (task:Task, result: Any?)
}

// All that is needed to make a task a command, leaving for possibilities of different tasks and different task mediators.  If I use class implementation, the commandMediator just need to use the command protocol to talk, instead of the concrete task. But I used struct for concret task. As a result, the mediator is coupled with the task struct implementation.
protocol Command {
    var id: Int { get }
    var name: String { get }
    var proType: ProType { get }
    var isGroupTask: Bool { get set }
    var startBy:String { get set }
    var finishedBy: String { get set }
    var status: TaskStatus { get set }
    var quotes: [(name:String, price: Int, message: String)] { get set }
    var function:CommandBlock { get }
    func execute(peer: CommandPeer) -&amp;amp;gt; Any
}

// commandMediator is kind of a task dispatch center. When the center receives tasks, it will look at the task configuration:
// * Group task -&amp;amp;gt; Send to every registered pro who can do the task and get the work back 
// * Regular task  -&amp;amp;gt; Check status of the task
// *** - Submited -&amp;amp;gt; Send the task to the pros who can do the task and get their quotation
// *** - ProChosen -&amp;amp;gt; Send the task to the chosen pros and get the final work, then send the work to the customer for confirmation
// For simplicity reason, a lof of things are left behind, such as what if the customer did not approve the work? Can I always expect work being returned from a pro? Can the pro be more proactive and submit their work at their own time? How do we track payment, can we keep only one copy of the task... Well, too many cases @_@
class CommandMediator {
    private var peers = [String:CommandPeer]()

    func registerPeer(peer:CommandPeer) {
        peers[peer.name] = peer
    }

    func unregisterPeer(peer:CommandPeer) {
        peers.removeValueForKey(peer.name)
    }
    // the core control logic, evaluate the task configuration and process accordingly.
    func dispatchCommand(caller:CommandPeer, task:Task) -&amp;amp;gt; Any? {
        var result: Any?
        // this task will be execute by everyone who can do the work
        if task.isGroupTask {
            result = sendTaskToChosenProAndGetWork(caller, task: task, isGroupTask: true)
        } else {
            switch task.status {
            case .S1_Submited: result = sendTaskAndGatherQuotes(caller, task: task)
            case .S4_ProChosen: result = sendTaskToChosenProAndGetWork(caller, task: task)
            case .Unknown:  print(&amp;quot;Something unknow, check the status&amp;quot;)
            default: print(&amp;quot;do nothing, check later.....!&amp;quot;)
            }
        }
        return result
    }

    private func sendTaskAndGatherQuotes(caller: CommandPeer, var task: Task) -&amp;amp;gt; Task {
        var quotes:[(name: String, price: Int, message: String)] = []
        for peer in peers.values {
            if (peer.name != caller.name) &amp;amp;&amp;amp; peer.isPro &amp;amp;&amp;amp; (peer.proType == task.proType) {
                quotes.append(peer.submitQuote(task))
            }
        }
        task.quotes = quotes
        task.status = TaskStatus.S3_QuoteGathered
        return task
    }
    private func sendTaskToChosenProAndGetWork(caller: CommandPeer, var task: Task, isGroupTask: Bool = false) -&amp;amp;gt; (task:Task, result: Any?) {
        var fullResult:(Task, Any?) = (task, nil)
       // task.status = TaskStatus.S6_ProFinished
        var groupResult:[Any?] = []

        var groupNames:String = &amp;quot;&amp;quot;
         if !isGroupTask {
            let choosenProName = task.quotes[0].name
            for peer in peers.values {
                if peer.name == choosenProName {
                    fullResult = peer.finishTask(task)
                }
            }
         } else {
             for peer in peers.values {
                if (peer.name != caller.name) &amp;amp;&amp;amp; peer.isPro &amp;amp;&amp;amp; (peer.proType == task.proType) {
                    groupResult.append(peer.finishTask(task).result)
                    groupNames += &amp;quot;\(peer.name) , &amp;quot;
                }
            }
        }
        if groupResult.count &amp;amp;gt; 0 {
            task.finishedBy = groupNames
            fullResult = (task, groupResult)
        }
        return fullResult
    }
}


func ==(lhs: Task, rhs: Task) -&amp;amp;gt; Bool {
    return lhs.id == rhs.id
}

// Command implementation as Task
struct Task: Command, CustomStringConvertible {
    static var idCount = 1
    let id: Int
    let name: String
    var price: Int
    let function: CommandBlock
    let proType: ProType
    var finishedBy: String = &amp;quot;&amp;quot;
    var startBy: String = &amp;quot;&amp;quot;
    var isGroupTask: Bool
    var quotes: [(name:String, price: Int, message: String)] = []
    var status: TaskStatus { didSet { print(status.rawValue) } } 
    var description: String {
        return &amp;quot;\nCurrent Task Info: #\(id)\n --name: \(name) - \(proType.rawValue) job\n --started by: \(startBy) \n --finished by: \(finishedBy)\n --current status: \(status.rawValue)\n --quotations: \(quotes) \n&amp;quot;
    }

    init(name: String,price: Int, proType: ProType = .Artist, isGroupTask:Bool = false, function: CommandBlock){
        self.id = Task.idCount++
        self.name = name
        self.function = function
        self.proType = proType
        self.status = .S0_Created
        self.price = price
        self.isGroupTask = isGroupTask
    }
    func execute(peer: CommandPeer) -&amp;amp;gt; Any {
        if peer.proType == self.proType {
            print(&amp;quot;Passing pro \(peer.name) the job...&amp;quot;)
            return function(peer)
        } else {
            return &amp;quot;Got no work from pro&amp;quot;
        }
    }

}
// CommandPeer implementation as a User, who can be a customer and a pro at the same time
class User: CommandPeer {
    var name: String
    let mediator: CommandMediator
    var tasks:[Task]
    var works:[Task]
    var isPro: Bool = true
    var proType: ProType
    var description: String {
        return &amp;quot;\(name) - \(proType.rawValue)\nTasks: \(tasks.map{$0.name}).  Works:\(works.map{$0.name})\n&amp;quot;
    }
    init(name: String, mediator: CommandMediator, isPro: Bool = true, proType: ProType = .None){
        self.name = name
        self.mediator = mediator
        tasks = []
        works = []
        self.isPro = isPro
        self.proType = proType
        mediator.registerPeer(self)
    }

    func sendTaskToGroupAndGetFinalWork(var task: Task) -&amp;amp;gt; (task: Task, result: Any?){
        task.isGroupTask = true
        tasks.append(task)
        return mediator.dispatchCommand(self, task: task) as! (Task, Any?)
    }
    func sendTaskAndGetTaskWithQuotes(var task: Task) -&amp;amp;gt; Task {
        task.startBy = name
        task.status = TaskStatus.S1_Submited
        tasks.append(task)
        return mediator.dispatchCommand(self, task: task) as! Task
    }

    func choseProAndGetFinalWork(var task: Task) -&amp;amp;gt; (task: Task, result: Any?){
        task.status = TaskStatus.S4_ProChosen
        return mediator.dispatchCommand(self, task: task) as! (Task, Any?)
    }

    // function for customer: choose pro and confirm work. Mediator only sends task back if there is at least one quotation.
    func choosePro(var task: Task) -&amp;amp;gt; Task{
        // assume customer is business, only randomly choose one quote
        let index = arc4random_uniform(UInt32(task.quotes.count))
        task.quotes = [task.quotes[Int(index)]]
        print(&amp;quot;Choose the pro\(task.quotes[0])&amp;quot;)
        task.status = TaskStatus.S4_ProChosen
        task.finishedBy = task.quotes[0].name
        return task
    }

    func confirmWork(var task: Task) -&amp;amp;gt; Task{
        let index = tasks.indexOf {$0.id == task.id}
        task.status = .S7_CustomConfirmWork
        if index != nil {
            tasks[index!] = task
        }
        return task
    }

    // function for pro: submit quotes and finish task
    func submitQuote(task: Task) -&amp;amp;gt; (name: String, price: Int, message: String) {
        let quote = task.price * (Int(arc4random_uniform(3)) + 1)
        let message = &amp;quot;Some random message for the customer: choose me...&amp;quot;
        return (name, quote, message)
    }

    // let&amp;#39;s assume a pro always finishes the job and give back the result now. Deal with bad pros later
    func finishTask(var task: Task) -&amp;amp;gt; (task:Task, result: Any?){
        let result = task.execute(self)
        task.finishedBy = name
        task.status = TaskStatus.S6_ProFinished
        self.works.append(task)
        return (task, result)
    }

}

// Testing. Create some tasks and users
let partyTask = Task(name: &amp;quot;Host a Party of the Century&amp;quot;, price: 2000000, proType: .PartyPlanner) { peer in
    print(&amp;quot;\(peer.name) is doing the job&amp;quot;)
    print(&amp;quot;Inviting people...&amp;quot;)
    return &amp;quot;Final work: the greatest party ever...&amp;quot;
}
let partyTask1 = Task(name: &amp;quot;Host a Party of the Next Century&amp;quot;, price: 2220000, proType: .PartyPlanner) { peer in
    print(&amp;quot;\(peer.name) is doing the job&amp;quot;)
    print(&amp;quot;Inviting people...&amp;quot;)
    return &amp;quot;Final work: the greatest party ever....&amp;quot;
}
let musicTask = Task(name: &amp;quot;Write A Mountain-Moving Song&amp;quot;, price: 80000000, proType: .Musician) { peer in
    print(&amp;quot;\(peer.name) is doing the job...&amp;quot;)
    print(&amp;quot;Composing ♭♮♯♯♮♭♭♫♬♩♪...&amp;quot;)
    return &amp;quot;Final work: a beautiful song&amp;quot;
}
let paintTask = Task(name: &amp;quot;The Finest Paint Collection&amp;quot;, price: 2010000, proType: .Artist, isGroupTask: true) { peer in
    print(&amp;quot;\(peer.name) is doing the job...&amp;quot;)
    print(&amp;quot;Painting...&amp;quot;)
    return &amp;quot;Final work: Paint Work&amp;quot;
}

let mediator = CommandMediator()
let u1 = User(name: &amp;quot;The Queue &amp;quot;, mediator: mediator)
var u2 = User(name: &amp;quot;Michelangelo&amp;quot;, mediator: mediator, proType: .Artist)
let u3 = User(name: &amp;quot;Johannes&amp;quot;, mediator: mediator, proType: .Musician)
let u6 = User(name: &amp;quot;Ludwig&amp;quot;, mediator: mediator, proType: .Musician)
let u4 = User(name: &amp;quot;Eugène&amp;quot;, mediator: mediator, proType: .Artist)
let u5 = User(name: &amp;quot;Josh&amp;quot;, mediator: mediator, proType: .PartyPlanner)
let tasks = [partyTask, paintTask, musicTask, partyTask1]
for task in tasks {
    if task.isGroupTask {
        print(&amp;quot;\nSending a task called [\(task.name)]  that require a GROUP to finish....&amp;quot;)
        let groupResults = u1.sendTaskToGroupAndGetFinalWork(task)
        print(&amp;quot;The final work: \(groupResults.1)&amp;quot;)
    } else {
        print(&amp;quot;\nCreating a task called [\(task.name)] that require a single pro to finish ...&amp;quot;)
        let taskWithQuotes = u1.sendTaskAndGetTaskWithQuotes(task)
        print(taskWithQuotes)
        print(&amp;quot;Getting finished work and task....&amp;quot;)
        let taskFinishedByProAndWork = u1.choseProAndGetFinalWork(taskWithQuotes)
        print(&amp;quot;The final work: \(taskFinishedByProAndWork.1)&amp;quot;)
        u1.confirmWork((taskFinishedByProAndWork.0))
    }
}


let users = [u1, u2, u3, u4, u5, u6]
users.map{print(&amp;quot;\($0.description)&amp;quot;)}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

      
      &lt;p&gt;
        &lt;a href=&quot;/assets/wp-content/uploads/2015/07/mediator.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1077&quot; src=&quot;/assets/wp-content/uploads/2015/07/mediator.png&quot; alt=&quot;mediator&quot; width=&quot;746&quot; height=&quot;970&quot; /&gt;&lt;/a&gt;
      &lt;/p&gt;
      
      &lt;p&gt;
        Upon seeing the tasks, I can&amp;#8217;t help wonder: don&amp;#8217;t we all serve the pleasure of the queue?
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift – Chapter 19: Flyweight</title>
   <link href="localhost:4000/2015/07/17/a-design-pattern-story-in-swift-chapter-19-flyweight/"/>
   <updated>2015-07-17T00:00:00-07:00</updated>
   <id>localhost:4000/2015/07/17/a-design-pattern-story-in-swift-chapter-19-flyweight</id>
   <content type="html">&lt;div class=&quot;page&quot; title=&quot;Page 333&quot;&gt;
  &lt;div class=&quot;layoutArea&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;
      &lt;p&gt;
        It&amp;#8217;s hard to get things done without a system to share and prioritize.  There are thousands of soldiers in the army, but only few of them are commanders. How can we quickly go through all the soldiers to find the commanders, their ranks, and how much power the army has together?
      &lt;/p&gt;
      
      &lt;blockquote&gt;
        &lt;p&gt;
          The flyweight pattern shares common data objects between multiple calling components.  It reduces the amount of memory needed to create the data objects required by the calling components and the amount of work required to create them. The impact of implementing the pattern increases with the number of calling components that share the data.  &lt;em&gt;&lt;a href=&quot;http://www.apress.com/9781484203958&quot;&gt;Design Pattern in Swift&lt;/a&gt; (The code is also referred by the book)&lt;/em&gt;
        &lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;struct Soldier{
    let name: String
    let id: Int
    var rank: Int
    var hashValue: Int { return name.hashValue }
}

func == (lhs: Soldier, rhs: Soldier) -&amp;amp;gt; Bool {
    return lhs.id == rhs.id &amp;amp;&amp;amp; lhs.name == rhs.name
}

extension Dictionary {
    init(setupFunc: (() -&amp;amp;gt; [(Key, Value)])){
        self.init()
        for item in setupFunc() {
            self[item.0] = item.1
        }
    }
}

protocol Flyweight {
    subscript(id: Int) -&amp;amp;gt; Soldier? { get set }
    var totalPower: Int { get }
    var numberOfCommanders: Int { get }
}

//: There are thousands of soldiers in the army, most of which are lower level soldiers, but some are commanders with higher rank
//: extrinsic holds all soldiers, intrinsic represent those who are commanders (who&amp;#39;s rank has been updated to higher level).

class ArmyFlyweight: Flyweight {
    private let extrinsicArmy: [Int: Soldier]
    private var intrinsicArmy: [Int: Soldier]
    private let queue = dispatch_queue_create(&amp;quot;dataQ&amp;quot;, DISPATCH_QUEUE_CONCURRENT)
    
    init(soldiers: [Int: Soldier]) {
        self.extrinsicArmy = soldiers
        self.intrinsicArmy = [:]
    }
    
    subscript(id: Int) -&amp;amp;gt; Soldier? {
        get {
            var result: Soldier?
            dispatch_sync(queue) { () -&amp;amp;gt; Void in
                guard let soldier = self.intrinsicArmy[id] else {
                    result =  self.extrinsicArmy[id]
                    return
                }
                result = soldier
            }
            return result
        }
        set(newSoldier) {
            if newSoldier != nil {
                dispatch_sync(queue) { () -&amp;amp;gt; Void in
                    self.intrinsicArmy[id] = newSoldier
                }
            }
        }
    }
    
    // each of the soldier&amp;#39;s power = rank * rank, initial rank for soliders is 0.
    var totalPower: Int {
        var result = 0
        dispatch_sync(queue) { () -&amp;amp;gt; Void in
            result = self.intrinsicArmy.values.map{$0.rank * $0.rank}.reduce(0, combine: +)
        }
        return result
    }
    var numberOfCommanders: Int {
        var result = 0
        dispatch_sync(queue) { () -&amp;amp;gt; Void in
            result = self.intrinsicArmy.count
        }
        return result
    }
    
}


class FlyweightFactory {
    static var numberOfSoldiers: Int = 10 {
        didSet {
            print(&amp;quot;Set the total number of soldiers to be \(numberOfSoldiers)&amp;quot;)
        }
    }
    class func createFlyweight() -&amp;amp;gt; Flyweight {
        return ArmyFlyweight(soldiers: extrinsicArmy)
    }
    
    private class var extrinsicArmy: [Int: Soldier] {
        get {
            struct singletonWrapper {
                static let singleton = Dictionary&amp;amp;lt;Int, Soldier&amp;amp;gt;(
                    setupFunc: { () in
                        var results:[(Int, Soldier)] = []
                        for i in 0..&amp;amp;lt;FlyweightFactory.numberOfSoldiers {
                            results.append(i, Soldier(name: &amp;quot;Sol#\(i)&amp;quot;, id: i, rank: 0))
                        }
                        return results
                    }
                    
                )
            }
            return singletonWrapper.singleton
        }
    }
}

class Army: CustomStringConvertible {
    private var soldiers: Flyweight
    init(){
        soldiers = FlyweightFactory.createFlyweight()
        print(&amp;quot;Army created!&amp;quot;)
    }
    var description: String {
        return &amp;quot;Total soldiers: \(FlyweightFactory.numberOfSoldiers). Total commanders: \(numberOfCommanders). Total Power:\(totalPower) \n&amp;quot;
    }
    func setRankBySoldier(var soldier: Soldier, newRank: Int){
        print(&amp;quot;Setting \(soldier.name)&amp;#39;s rank to be \(newRank)&amp;quot;)
        soldier.rank = newRank
        soldiers[soldier.id] = soldier
    }
    func getSoliderById(id: Int) -&amp;amp;gt; Soldier? {
        return soldiers[id]
    }
    
    func setRankById(id: Int, newRank: Int){
        if var oldSoldier = soldiers[id] {
            print(&amp;quot;Setting \(oldSoldier.name)&amp;#39;s rank to be \(newRank)&amp;quot;)
            oldSoldier.rank = newRank
            soldiers[oldSoldier.id] = oldSoldier
        } else {
            print(&amp;quot;Failed! Trying to set rank to an unknown soldier whose id is \(id)&amp;quot;)
        }
    }
    func getCommanderNames() -&amp;amp;gt; String {
        print(&amp;quot;Trying to get commanders&amp;#39; names&amp;quot;)
        guard let s = soldiers as? ArmyFlyweight else { return &amp;quot;Failed to get commanders&amp;#39; names&amp;quot; }
        return s.intrinsicArmy.values.map{$0.name}.reduce(&amp;quot;&amp;quot;){ $0 + &amp;quot;  &amp;quot; + $1}
    }
    var totalPower: Int { return soldiers.totalPower }
    var numberOfCommanders: Int { return soldiers.numberOfCommanders }
}

//: Testing
let totalNumberOfSoldiers = 20000
FlyweightFactory.numberOfSoldiers = totalNumberOfSoldiers
let army1 = Army()
print(army1.description)
let sol1 = army1.getSoliderById(2)

for i in 1...10 {
    army1.setRankById(Int(arc4random_uniform(24000)) , newRank: Int(arc4random_uniform(10)) + 1)
}

army1.setRankBySoldier(sol1!, newRank: 4)
print(army1.description)
print(army1.getCommanderNames())

print(&amp;quot;\n\n&amp;quot;)&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/Flyweight.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1074&quot; src=&quot;/assets/wp-content/uploads/2015/07/Flyweight.png&quot; alt=&quot;Flyweight&quot; width=&quot;647&quot; height=&quot;326&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift – Chapter 18: Visitor</title>
   <link href="localhost:4000/2015/07/15/a-design-pattern-story-in-swift-chapter-18-visitor/"/>
   <updated>2015-07-15T00:00:00-07:00</updated>
   <id>localhost:4000/2015/07/15/a-design-pattern-story-in-swift-chapter-18-visitor</id>
   <content type="html">&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt; It was Confucius who said isn&amp;#8217;t it great when friends visit from distant places. &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;子曰，&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; “&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;有朋自远方来，不亦乐乎&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;” &lt;/span&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;The visitor pattern allows new algorithms to operate on collections of heterogeneous objects without needing to modify or subclass the collection class. It&amp;#8217;s similar to the strategy pattern. &amp;#8212; &lt;em&gt;&lt;a href=&quot;http://www.apress.com/9781484203958&quot;&gt;Design Pattern in Swift&lt;/a&gt;&lt;/em&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;protocol Person {
    func accept(visitor: Visitor)
}

protocol Visitor {
    func visit(person: Dwarf)
    func visit(person: Maiden)
    func visit(person: Knight)
    
}

struct Dwarf: Person {
    let name: String
    let expectedAge: Int
    func accept(visitor: Visitor) {
        visitor.visit(self)
    }
}

struct Maiden: Person {
    let name: String
    let expectedAge: Int
    func accept(visitor: Visitor) {
        visitor.visit(self)
    }
}
struct Knight: Person {
    let name: String
    let expectedAge: Int
    let skillLevel: Int
    func accept(visitor: Visitor) {
        visitor.visit(self)
    }
}

struct People: Person {
    let group: [Person]
    func accept(visitor: Visitor) {
        group.map{ $0.accept(visitor) }
    }
}
//: A healthProVisitor can increase each person&amp;#39;s age by different amount of years
class HealthProVisitor: Visitor {
    var totalExpectedAgeOld = 0
    var totalExpectedAge = 0
    func visit(person: Dwarf) {
        totalExpectedAgeOld += person.expectedAge
        totalExpectedAge += person.expectedAge + 1
    }
    func visit(person: Knight) {
        totalExpectedAgeOld += person.expectedAge
        totalExpectedAge += person.expectedAge + 5
    }
    func visit(person: Maiden) {
        totalExpectedAgeOld += person.expectedAge
        totalExpectedAge += person.expectedAge + 10
    }
}

//: a prettyNameVisitor can form memoriable names for others to remember
class PrettyNameVisitor: Visitor {
    var names: [String] = []
    func visit(person: Maiden) {
        names.append(&amp;quot;Pretty Maiden \(person.name)&amp;quot;)
    }
    func visit(person: Knight) {
        names.append(&amp;quot;Knight \(person.name) with \(person.skillLevel) level of skills&amp;quot;)
    }
    func visit(person: Dwarf) {
        names.append(&amp;quot;A plain dwarf named \(person.name) &amp;quot;)
    }
}

//: Testing 
print(&amp;quot;Created a group of people Helen (32), Joe (99), Eleot(45)...&amp;quot;)
let people = People(group: [Maiden(name: &amp;quot;Helen&amp;quot;, expectedAge: 32),
        Dwarf(name: &amp;quot;Joe&amp;quot;, expectedAge: 99),
        Knight(name: &amp;quot;Eleot&amp;quot;, expectedAge: 32, skillLevel: 45)
    ])

let healthProVisitor = HealthProVisitor()
let prettyNameVisitor = PrettyNameVisitor()
print(&amp;quot;The healthProVisitor is visiting the group...&amp;quot;)
people.accept(healthProVisitor)
print(&amp;quot;Before visit, total expected age:\(healthProVisitor.totalExpectedAgeOld)&amp;quot;)
print(&amp;quot;After visit, total expected age:\(healthProVisitor.totalExpectedAge)\n&amp;quot;)
print(&amp;quot;The prettyNameVisitor is visiting the group...&amp;quot;)
people.accept(prettyNameVisitor)
print(&amp;quot;After visit, people&amp;#39;s names: \(prettyNameVisitor.names) \n&amp;quot;)


class InsuranceVisitor: Visitor {
    var salesRecord:[String: Bool] = [:]
    func visit(person: Dwarf) {
        salesRecord[person.name] = getQualification(person.expectedAge)
    }
    func visit(person: Knight) {
         salesRecord[person.name] = getQualification(person.expectedAge)
     }
    func visit(person: Maiden) {
         salesRecord[person.name] = getQualification(person.expectedAge)
    }
    
    private func getQualification(expectedAge: Int) -&amp;amp;gt; Bool {
        return expectedAge &amp;amp;gt; 45
    }
}


//: Testing
print(&amp;quot;A new visitor, the insurance guy! Let&amp;#39;s see what&amp;#39;s his sales record say after the visit&amp;quot;)
let insuranceVisitor = InsuranceVisitor()
people.accept(insuranceVisitor)
insuranceVisitor.salesRecord.map{
    print(&amp;quot;\($0.0), is eligiable for insurance?: \($0.1)&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/visitor.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1070&quot; src=&quot;/assets/wp-content/uploads/2015/07/visitor.png&quot; alt=&quot;visitor&quot; width=&quot;792&quot; height=&quot;195&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift – Chapter 17: Memento</title>
   <link href="localhost:4000/2015/07/15/a-design-pattern-story-in-swift-chapter-17-memento/"/>
   <updated>2015-07-15T00:00:00-07:00</updated>
   <id>localhost:4000/2015/07/15/a-design-pattern-story-in-swift-chapter-17-memento</id>
   <content type="html">&lt;p&gt;A good snapshot stops a beautiful moment from running away. At some point, we&amp;#8217;ll press the restore button and relive that moment again.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The memento pattern captures the complete state of an object into a memento that can be used to reset the object at a later date. It allows a complete reset of an object without the need to track and apply individual undo commands. –&lt;em&gt;  &lt;a href=&quot;http://www.apress.com/9781484203958&quot;&gt;Design Pattern in Swift&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;//: Just a sign to show the class / struct is a memento, nothing special
protocol Memento {
}

//: The originator can create and restore game state
protocol Originator {
    func createMemento() -&amp;amp;gt; Memento
    func applyMemento(memento: Memento)
}

//: a game state entry
struct GameStateEntry {
    var level: Int
    var weapon: String
    var points: Int
}

//: A GameState memento, which contains all the information the CheckPoint needed to restore the state
struct GameMemento: Memento {
    private let entries: [Int: GameStateEntry]
    private let nextId: Int
    private let totalPoints: Int
    init(checkPoint: CheckPoint){
        self.entries = checkPoint.entries
        self.nextId = checkPoint.nextId
        self.totalPoints = checkPoint.totalPoints
    }
    func apply(checkPoint: CheckPoint) {
        print(&amp;quot;Restoring a game state to a checkpoint...&amp;quot;)
        checkPoint.nextId = nextId
        checkPoint.totalPoints = totalPoints
        checkPoint.entries = entries
    }
}
//: A CheckPoint can create and restore game state
class CheckPoint: Originator {
    private var entries: [Int: GameStateEntry] = [:]
    private var totalPoints: Int  = 0
    private var nextId: Int = 0
    
    func addGameStateEntry(level: Int, weapon: String, points: Int) {
        let entry = GameStateEntry(level: level, weapon: weapon, points: points)
        entries[nextId++] = entry
        totalPoints += points
    }
    
    func createMemento() -&amp;amp;gt; Memento {
        return GameMemento(checkPoint: self)
    }
    
    func applyMemento(memento: Memento) {
        guard let m = memento as? GameMemento  else { return }
        m.apply(self)
    }
    
    func printCheckPoint() {
        print(&amp;quot;Printing checkPoint....&amp;quot;)
        entries.sort {$0.0 &amp;amp;lt; $1.0}
            .map {
                print(&amp;quot;Level: \($0.1.level)   Weapon: \($0.1.weapon)   Points: \($0.1.points) &amp;quot;)
        }
        print(&amp;quot;Total Points: \(totalPoints)\n&amp;quot;)
        
    }
}


//:Testing

let checkPoint = CheckPoint()
checkPoint.addGameStateEntry(0, weapon: &amp;quot;Fire Ball&amp;quot;, points: 20)
checkPoint.addGameStateEntry(1, weapon: &amp;quot;Flood&amp;quot;, points: 10)
checkPoint.printCheckPoint()
let memento = GameMemento(checkPoint: checkPoint)
checkPoint.addGameStateEntry(2, weapon: &amp;quot;Crusher&amp;quot;, points: 30)
checkPoint.addGameStateEntry(4, weapon: &amp;quot;Flower&amp;quot;, points: 30)
checkPoint.printCheckPoint()

checkPoint.applyMemento(memento)
checkPoint.printCheckPoint()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/memento.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1065&quot; src=&quot;/assets/wp-content/uploads/2015/07/memento.png&quot; alt=&quot;memento&quot; width=&quot;374&quot; height=&quot;286&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift – Chapter 16: Object Pool</title>
   <link href="localhost:4000/2015/07/14/a-design-pattern-story-in-swift-chapter-16-object-pool/"/>
   <updated>2015-07-14T00:00:00-07:00</updated>
   <id>localhost:4000/2015/07/14/a-design-pattern-story-in-swift-chapter-16-object-pool</id>
   <content type="html">&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;There is a MagicHouse where people can borrow magic objects. The house has a pool which manages the magic objects.&lt;/span&gt;
&lt;/p&gt;

&lt;div class=&quot;page&quot; title=&quot;Page 138&quot;&gt;
  &lt;div class=&quot;layoutArea&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;
      &lt;blockquote&gt;
        &lt;p&gt;
          The object pool pattern manages a collection of reusable objects that are provided to calling components. A component obtains an object from the pool, uses it to perform work, and returns it to the pool so that it can be allocated to satisfy future requests. An object that has been allocated to a caller is not available for use by other components until it has been returned to the pool. &amp;#8212;&lt;em&gt;  &lt;a href=&quot;http://www.apress.com/9781484203958&quot;&gt;Design Pattern in Swift&lt;/a&gt;&lt;/em&gt;
        &lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;struct MagicObject {
    let name: String
    let serialNumber: Int
    var occupier: [String] = []
    var borrowedCount: Int = 0
}

//: a basic pool which allows getting and returning any objects.
class Pool&amp;amp;lt;T&amp;amp;gt; {
    private var data = [T]()
    private let arrayQ = dispatch_queue_create(&amp;quot;arrayQ&amp;quot;, DISPATCH_QUEUE_SERIAL)
    private let semaphore: dispatch_semaphore_t
    
    init(items: [T]) {
        data.reserveCapacity(data.count)
        for item in items {
            data.append(item)
        }
        // create a counter semaphore for the available items in the pool
        semaphore = dispatch_semaphore_create(items.count)
    }
    
    func getFromPool() -&amp;amp;gt; T? {
        var result: T?
        // the semaphore count is decreased each time when the wait is called. If the count is 0, the function will block
        if dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER) == 0 {
            if data.count &amp;amp;gt; 0 {
                dispatch_sync(arrayQ, { () -&amp;amp;gt; Void in
                    result = self.data.removeAtIndex(0)
                })
            }
        }
        return result
    }
    
    func returnToPool(item: T){
        dispatch_sync(arrayQ, { () -&amp;amp;gt; Void in
            self.data.append(item)
            // increase the counter by 1
            dispatch_semaphore_signal(self.semaphore)
        })
    }
}

extension Int {
    func times(action: (Int)-&amp;amp;gt;()) {
        for i in 0..&amp;amp;lt;self {
            action(i)
        }
    }
}
class MagicHouse {
    private let pool: Pool&amp;amp;lt;MagicObject&amp;amp;gt;
    static var sharedInstance = MagicHouse()
    static var magicDebtInfo:[(String, Int, String)] = []
    private init(){
        var magicObjects:[MagicObject] = []
        2.times{
            magicObjects.append(MagicObject(name: &amp;quot;Red Diamond&amp;quot;, serialNumber: $0, occupier: [], borrowedCount: 0))
        }
        3.times{
            magicObjects.append(MagicObject(name: &amp;quot;Blue Heart&amp;quot;, serialNumber: $0, occupier: [], borrowedCount: 0))
        }
        self.pool = Pool(items: magicObjects)
    }
    
    class func lendMagicObject(occupier: String) -&amp;amp;gt; MagicObject? {
        var magicObject = sharedInstance.pool.getFromPool()
        if magicObject != nil {
            magicObject!.occupier.append(occupier)
            magicObject!.borrowedCount++
            magicDebtInfo.append((magicObject!.name, magicObject!.serialNumber, occupier))
            print(&amp;quot;\(occupier) is borrowing \(magicObject!.name) #\(magicObject!.serialNumber)&amp;quot;)
        }
        return magicObject
    }
    
    class func receiveMagicObject(obj: MagicObject) {
        magicDebtInfo = magicDebtInfo.filter{
            $0.0 != obj.name &amp;amp;&amp;amp; $0.1 != obj.serialNumber
        }
        sharedInstance.pool.returnToPool(obj)
        print(&amp;quot;\(obj.occupier.last!) returning \(obj.name) #\(obj.serialNumber)&amp;quot;)
    }
    
    class func printReport(){
        print(&amp;quot;\nShow Report: Magic House currently has \(sharedInstance.pool.data.count) magic object(s) in stock&amp;quot;)
        (sharedInstance.pool.data as [MagicObject]).map{
            print(&amp;quot;\($0.name) #\($0.serialNumber) \nBorrowed \($0.borrowedCount) time(s) by \($0.occupier)&amp;quot;)
        }
       
        if magicDebtInfo.count &amp;amp;gt; 0 {
            print(&amp;quot;\nMagic Objects currently lent out:&amp;quot;)
            magicDebtInfo.map{
                print(&amp;quot;\($0.0) #\($0.1) by \($0.2)&amp;quot;)
            }
        }
    }
}

//: Testing
var queue = dispatch_queue_create(&amp;quot;workQ&amp;quot;, DISPATCH_QUEUE_CONCURRENT)
var group = dispatch_group_create()

print(&amp;quot;\n------Starting test...&amp;quot;)

for i in 1 ... 7 {
    dispatch_group_async(group, queue, {() in
        var obj = MagicHouse.lendMagicObject(&amp;quot;person #\(i)&amp;quot;)
        if obj != nil {
            NSThread.sleepForTimeInterval(Double(rand() % 3))
            MagicHouse.receiveMagicObject(obj!)
        }
    })
}

dispatch_group_wait(group, DISPATCH_TIME_FOREVER)
let m1 = MagicHouse.lendMagicObject(&amp;quot;William&amp;quot;)
let m3 = MagicHouse.lendMagicObject(&amp;quot;Tato&amp;quot;)
MagicHouse.printReport()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/object-pool.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1060&quot; src=&quot;/assets/wp-content/uploads/2015/07/object-pool.png&quot; alt=&quot;object-pool&quot; width=&quot;504&quot; height=&quot;523&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift – Chapter 15: Bridge</title>
   <link href="localhost:4000/2015/07/13/a-design-pattern-story-in-swift-chapter-15-bridge/"/>
   <updated>2015-07-13T00:00:00-07:00</updated>
   <id>localhost:4000/2015/07/13/a-design-pattern-story-in-swift-chapter-15-bridge</id>
   <content type="html">&lt;p&gt;An IOT Bridge can handle different outgoing and incoming messages for the connected devices, regardless of the message format and the device types.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;The bridge pattern is used to separate the abstract elements of a class from the implementation details, providing the means to replace the implementation details without modifying the abstraction.&lt;/span&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;//: an IOT device can send two kinds of messages: IOTMessage which is the basic format, and EncryptIOTMessage which is encrypted message
protocol Message {
    var messageString: String { get }
    var contentToSend:String { get }
    func prepareMessage() -&amp;amp;gt; String
}

struct IOTMessage: Message {
    var messageString: String
    var contentToSend: String {return prepareMessage()}
    func prepareMessage() -&amp;amp;gt; String {
        return &amp;quot;Basic Message: \(messageString)&amp;quot;
    }
}
struct EncryptIOTMessage: Message {
    var messageString: String
    var contentToSend: String {return prepareMessage()}
    func prepareMessage() -&amp;amp;gt; String {
        return &amp;quot;Encrypted Message: \(String(Array(messageString.characters.reverse())))&amp;quot;
    }
}


//: Since an IOT Device is connected, it can process outgoing and incoming messages
protocol IOTDevice: CustomStringConvertible {
    func processMessage(msg: Message, isIncomingMsg: Bool)
}

//: The base class for any kind of IOT devices
class Device: IOTDevice {
    var description: String { return &amp;quot;Basic Device returned, Error&amp;quot; }
    
    enum Devices {
        case WeigthScale
        case HumidityDetector
    }
    
    class func getDevice(deviceType: Devices) -&amp;amp;gt; Device {
        switch deviceType {
        case .WeigthScale: return WeightScale()
        case .HumidityDetector: return HumidityDetector()
        }
    }
    func processMessage(msg: Message, isIncomingMsg: Bool) {
        fatalError(&amp;quot;Something wrong!&amp;quot;)
    }
}

//: A connected Weight Scale
class WeightScale: Device {
    override var description: String { return &amp;quot;Weight Scale&amp;quot; }
    override func processMessage(msg: Message, isIncomingMsg: Bool) {
        if isIncomingMsg {
            print(&amp;quot;Incoming message:[\(msg.contentToSend)]&amp;quot;)
        } else {
            print(&amp;quot;Outgoing message: [\(msg.contentToSend)]&amp;quot;)
        }
    }
}
//: A connected HumidityDetector
class HumidityDetector: Device {
    override var description: String { return &amp;quot;Humidity Detector&amp;quot; }
    override func processMessage(msg: Message, isIncomingMsg: Bool) {
        if isIncomingMsg {
            print(&amp;quot;Incoming message:[\(msg.contentToSend)]&amp;quot;)
        } else {
            print(&amp;quot;Outgoing message:[\(msg.contentToSend)]&amp;quot;)
        }
    }
}

//: Just a communication protocol, not important here
protocol IOTCommunication {
    var device:IOTDevice { get set }
    func processBridgeMessage(msg: Message, isIncomingMsg: Bool)
}

//: The bridge to handle the message processing of IOT devices
struct IOTBridge: IOTCommunication {
    var device: IOTDevice {
        didSet {
            print(&amp;quot;\nset bridge device to:\(device.description)&amp;quot;)
        }
    }

    internal func processBridgeMessage(msg: Message, isIncomingMsg: Bool) {
        device.processMessage(msg, isIncomingMsg: isIncomingMsg)
    }
    func sendMessage(msg: String, encrypted: Bool = false ){
        let msgStr = device.description + &amp;quot; &amp;quot; +  msg
        let iotMsg: Message = encrypted ? EncryptIOTMessage(messageString: msgStr) : IOTMessage(messageString: msgStr)
        processBridgeMessage(iotMsg, isIncomingMsg: false)
    }
    func receiveMessage(msg: String, encrypted: Bool = false) {
        let clearMsg = encrypted ? String(Array(msg.characters.reverse())) : msg
        var msgStr =  &amp;quot;\(device.description)  \(msg)&amp;quot;
        if encrypted {
            msgStr += &amp;quot;(decrypted: \(clearMsg))&amp;quot;
        }
        processBridgeMessage(IOTMessage(messageString: msgStr), isIncomingMsg: true)
    }

}

//: Testing 
print(&amp;quot;Create the IOT bridge and set the device to Weight Scale&amp;quot;)
var bridge = IOTBridge(device: WeightScale())
bridge.sendMessage(&amp;quot;120lb&amp;quot;)
bridge.receiveMessage(&amp;quot;History Weigth: 110 lb Oct. 20, 2014&amp;quot;)

bridge.device =  HumidityDetector()
bridge.sendMessage(&amp;quot;91%&amp;quot;)
bridge.receiveMessage(&amp;quot;History Humidity: 45% Aug. 30, 2014, 98% Dec. 21, 2014&amp;quot;)
bridge.sendMessage(&amp;quot;45% Aug. 30, 2014&amp;quot;, encrypted: true)
bridge.receiveMessage(&amp;quot;4102 ,03 .guA %54 rotceteD ytidimuH&amp;quot;, encrypted: true)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/bridge.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1056&quot; src=&quot;/assets/wp-content/uploads/2015/07/bridge.png&quot; alt=&quot;bridge&quot; width=&quot;918&quot; height=&quot;137&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/chain-of-responsbility1.png&quot;&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift – Chapter 14: Chain Of Responsibility</title>
   <link href="localhost:4000/2015/07/13/a-design-pattern-story-in-swift-chapter-14-chain-of-responsibility/"/>
   <updated>2015-07-13T00:00:00-07:00</updated>
   <id>localhost:4000/2015/07/13/a-design-pattern-story-in-swift-chapter-14-chain-of-responsibility</id>
   <content type="html">&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;There is a dancing festival every year. Gods, Fairies and some other VIPs are in the guest list. There are also some unwelecomed walk-ins. Each of the guest type would have different host to receive and host them, except the walk-ins would have no hosts. &lt;/span&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt; The chain of responsibility pattern is used to process varied requests, each of which may be dealt with by a different handler.&lt;/span&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;enum GuestType {
    case VIP
    case God
    case Fairy
    case Unwelcomed
}

struct Guest {
    let guestType: GuestType
    let name: String
}

class Host{
    var nextHost: Host?
    required init(){}
    
    func host(guest: Guest, handled: Bool = false) -&amp;amp;gt; Bool {
        if nextHost != nil {
            return nextHost!.host(guest, handled: handled)
        } else if !handled {
            print(&amp;quot;End of the chain. No host available for \(guest.name)\n&amp;quot;)
        }
        return handled
    }
    
    class func createChain() -&amp;amp;gt; Host?{
        let host = VIPHost()
        host.nextHost = GodHost()
        host.nextHost?.nextHost = FairyHost()
        return host
    }
}

class FairyHost: Host {
    override func host(guest: Guest, var handled: Bool) -&amp;amp;gt; Bool {
        if guest.guestType == .Fairy {
            print(&amp;quot;\(guest.name) is handled by FairyHost\n&amp;quot;)
            handled = true
        }
        return super.host(guest, handled: handled)
    }
}

class GodHost: Host {
    override func host(guest: Guest, var handled: Bool) -&amp;amp;gt; Bool {
        if guest.guestType == .God {
            print(&amp;quot;\(guest.name) is handled by GodHost\n&amp;quot;)
            handled = true
        }
        return super.host(guest, handled: handled)
    }
}

class VIPHost: Host {
    var totalGuests = 0
    var vipGuests = 0
    override func host(guest: Guest, var handled: Bool) -&amp;amp;gt; Bool {
        totalGuests++
        if guest.guestType == .VIP {
            print(&amp;quot;\(guest.name) is handled by VIPHost&amp;quot;)
            handled = true
            vipGuests++
            print(&amp;quot;Currently \(vipGuests) VIP out of \(totalGuests) guests\n&amp;quot;)
        }
        return super.host(guest, handled: handled)
    }
}

//: Testing 
let guests = [Guest(guestType: .Fairy, name: &amp;quot;Tinkle Fairy&amp;quot;),
              Guest(guestType: .God, name: &amp;quot;God of Thunder&amp;quot;),
              Guest(guestType: .VIP, name: &amp;quot;VIP Tor&amp;quot;),
              Guest(guestType: .Unwelcomed, name: &amp;quot;Satan&amp;quot;),
              Guest(guestType: .VIP, name: &amp;quot;VIP Helen&amp;quot;)]


if let hostChain = Host.createChain() {
    for guest in guests {
        hostChain.host(guest)
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/chain-of-responsbility.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1049&quot; src=&quot;/assets/wp-content/uploads/2015/07/chain-of-responsbility.png&quot; alt=&quot;chain-of-responsbility&quot; width=&quot;326&quot; height=&quot;169&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift – Chapter 13: Builder</title>
   <link href="localhost:4000/2015/07/08/a-design-pattern-story-in-swift-chapter-13-builder/"/>
   <updated>2015-07-08T00:00:00-07:00</updated>
   <id>localhost:4000/2015/07/08/a-design-pattern-story-in-swift-chapter-13-builder</id>
   <content type="html">&lt;p&gt;The process of making a fragrance is quite complex, that&amp;#8217;s why we have a fragrance builder who will help config the default ingredient.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The builder pattern is used to create complex objects with constituent parts that must be created in the same order or using a specific algorithm. An external class controls the construction algorithm. &amp;#8211;&lt;a href=&quot;https://github.com/ochococo/Design-Patterns-In-Swift&quot;&gt;From&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;//: 1. Simple FragranceBuilder
class Fragrance: CustomStringConvertible {
    let name: String
    let ingFlower: String
    let ingFruit: String
    let ingWood: String
    let ingSpecial: String
    let powerLevel: Int
    var description: String {
        return &amp;quot;Fragrance:\(name)\n&amp;quot; +
        &amp;quot;Flower:\(ingFlower)\n&amp;quot; +
        &amp;quot;Fruit: \(ingFruit)\n&amp;quot; +
        &amp;quot;Wood: \(ingWood)\n&amp;quot; +
        &amp;quot;Special Ingredience: \(ingSpecial)\n&amp;quot; +
        &amp;quot;Power Level: \(powerLevel)\n&amp;quot;
    }
    
    init(name:String, ingFlower: String, ingFruit: String, ingWood: String, ingSpecial:String, powerLevel: Int) {
        self.name = name
        self.ingFlower = ingFlower
        self.ingFruit = ingFruit
        self.ingWood = ingWood
        self.ingSpecial = ingSpecial
        self.powerLevel = powerLevel
    }
}

class FragranceBuilder {
    private var ingFlower = &amp;quot;Jasmine&amp;quot;
    private var ingFruit = &amp;quot;Strawberry&amp;quot;
    private var ingWood = &amp;quot;Sandalwood&amp;quot;
    private var ingSpecial = &amp;quot;Fish&amp;#39;s tear&amp;quot;
    private var powerLevel = 0
    func setIngFlower(ingFlower: String){
        self.ingFlower = ingFlower
    }
    func setIngFruit(ingFruit: String){
        self.ingFruit = ingFruit
    }
    func setIngWood(ingWood: String){
        self.ingWood = ingWood
    }
    func setIngSpecial(ingSpecial: String){
        self.ingSpecial = ingSpecial
    }
    func setPowerLevel(powerLevel: Int){
        self.powerLevel = powerLevel
    }
    
    func buildFragrance(name: String) -&amp;amp;gt; Fragrance {
        return Fragrance(name: name, ingFlower: ingFlower, ingFruit: ingFruit, ingWood: ingWood, ingSpecial: ingSpecial, powerLevel: powerLevel)
    }
}

let builder = FragranceBuilder()
builder.setIngFlower(&amp;quot;Rose&amp;quot;)
builder.setIngSpecial(&amp;quot;First Raindrop in Spring&amp;quot;)
let roseFragrance = builder.buildFragrance(&amp;quot;Rose in Spring&amp;quot;)
print(roseFragrance.description)


//: 2. Use specialized FragranceBuilderFactory to build different fragrance
enum FragranceType {
    case Floral
    case Fruity
    case Oceanic
}

class FragranceBuilderFactory {
    private var ingFlower = &amp;quot;Jasmine&amp;quot;
    private var ingFruit = &amp;quot;Strawberry&amp;quot;
    private var ingWood = &amp;quot;Sandalwood&amp;quot;
    private var ingSpecial = &amp;quot;Fish&amp;#39;s tear&amp;quot;
    private var powerLevel = 0
    private init(){
        // do nothing
    }
    func setIngFlower(ingFlower: String){
        self.ingFlower = ingFlower
    }
    func setIngFruit(ingFruit: String){
        self.ingFruit = ingFruit
    }
    func setIngWood(ingWood: String){
        self.ingWood = ingWood
    }
    func setIngSpecial(ingSpecial: String){
        self.ingSpecial = ingSpecial
    }
    func setPowerLevel(powerLevel: Int){
        self.powerLevel = powerLevel
    }
    
    func buildFragrance(name: String) -&amp;amp;gt; Fragrance {
        return Fragrance(name: name, ingFlower: ingFlower, ingFruit: ingFruit, ingWood: ingWood, ingSpecial: ingSpecial, powerLevel: powerLevel)
    }
    
    class func getFragranceBuilder(fragranceType: FragranceType) -&amp;amp;gt; FragranceBuilderFactory {
        switch fragranceType {
        case .Floral: return FloralFrangranceBuilder()
        case .Fruity: return FruityFrangranceBuilder()
        case .Oceanic: return OceanicFrangranceBuilder()
        }
    }
}

class FloralFrangranceBuilder: FragranceBuilderFactory {
    override init(){
        super.init()
        self.ingFlower = &amp;quot;Rose&amp;quot;
        self.powerLevel = 99
    }
    
}
class FruityFrangranceBuilder: FragranceBuilderFactory {
    override init(){
        super.init()
        self.ingFruit = &amp;quot;Apple&amp;quot;
        self.powerLevel = 99
    }

    
}
class OceanicFrangranceBuilder: FragranceBuilderFactory {
    override init(){
        super.init()
        self.ingWood = &amp;quot;Pine&amp;quot;
        self.powerLevel = 80
    }
}

let builder1 = FragranceBuilderFactory.getFragranceBuilder(FragranceType.Oceanic)
builder.setIngSpecial(&amp;quot;Mermaid Scale&amp;quot;)
let fragrance1 = builder.buildFragrance(&amp;quot;Ocean Song&amp;quot;)
print(fragrance1.description)


//: 3. Use closure to config the FragranceBuilder
struct TearInHeavenFragrance {
    let name: String
    let ingFlower: String
    let ingFruit: String
    let ingWood: String
    let ingSpecial: String
    let powerLevel: Int
    var description: String {
        return &amp;quot;Fragrance:\(name)\n&amp;quot; +
            &amp;quot;Flower:\(ingFlower)\n&amp;quot; +
            &amp;quot;Fruit: \(ingFruit)\n&amp;quot; +
            &amp;quot;Wood: \(ingWood)\n&amp;quot; +
            &amp;quot;Special Ingredience: \(ingSpecial)\n&amp;quot; +
        &amp;quot;Power Level: \(powerLevel)\n&amp;quot;
    }
    
    init(name: String, builder: TearInHeavenFragranceBuilder) {
        self.name = name
        self.ingFlower = builder.ingFlower
        self.ingFruit = builder.ingFruit
        self.ingWood = builder.ingWood
        self.ingSpecial = builder.ingSpecial
        self.powerLevel = builder.powerLevel
    }
}

class TearInHeavenFragranceBuilder {
    var ingFlower = &amp;quot;Jasmine&amp;quot;
    var ingFruit = &amp;quot;Strawberry&amp;quot;
    var ingWood = &amp;quot;Sandalwood&amp;quot;
    var ingSpecial = &amp;quot;Fish&amp;#39;s tear&amp;quot;
    var powerLevel = 0
    init(builderHandler: (TearInHeavenFragranceBuilder) -&amp;amp;gt; Void) {
        builderHandler(self)
    }
}
let builder2 = TearInHeavenFragranceBuilder { (builder) -&amp;amp;gt; Void in
    builder.ingFlower = &amp;quot;White Lily&amp;quot;
    builder.powerLevel = 78
}

let fragrance2 = TearInHeavenFragrance(name: &amp;quot;Tear in Heaven&amp;quot;, builder: builder2)
print(fragrance2.description)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/builder.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1043&quot; src=&quot;/assets/wp-content/uploads/2015/07/builder.png&quot; alt=&quot;builder&quot; width=&quot;371&quot; height=&quot;285&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift – Chapter 12: Proxy</title>
   <link href="localhost:4000/2015/07/07/a-design-pattern-story-in-swift-chapter-12-proxy/"/>
   <updated>2015-07-07T00:00:00-07:00</updated>
   <id>localhost:4000/2015/07/07/a-design-pattern-story-in-swift-chapter-12-proxy</id>
   <content type="html">&lt;p&gt;Life is too short to do everything by ourselves, so we often let others do things for us.&lt;/p&gt;

&lt;p&gt;When the good people of the village need their own cat pets, they go to different proxies. The proxies would then do some god-knows-what kind of trick and get the villagers some cats.&lt;/p&gt;

&lt;p&gt;First, it&amp;#8217;s the entry-level Simple Cat Proxy called &amp;#8211; &amp;#8220;SimpleCatRequestProxy&amp;#8221;. You request a cat and he&amp;#8217;ll get a cat from the remote cat house.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;protocol SimpleCatRequest {
    func getCat(url: String, name: String) -&amp;amp;gt; Cat?
}

//: Use CatRequestProxy to get cat photo from a remote place
class SimpleCatRequestProxy: SimpleCatRequest {
    private let semaphore = dispatch_semaphore_create(0)
    func getCat(url: String, name: String) -&amp;amp;gt; Cat? {
        print(&amp;quot;Trying to get \(name) from the SimpleCatProxy&amp;quot;)
        var cat: Cat?
        guard let url: NSURL = NSURL(string:url) else { return nil }
        let task = NSURLSession.sharedSession().dataTaskWithURL(url) {
            (data, _, _) -&amp;amp;gt; Void in
            cat = Cat(name: name, image: UIImage(data: data!))
            print(&amp;quot;Got \(name) from remote \n&amp;quot;)
            dispatch_semaphore_signal(self.semaphore)
        }
        task?.resume()
        dispatch_semaphore_wait(self.semaphore, DISPATCH_TIME_FOREVER)
        return cat
    }
}
//: Creating the proxy and get a cat from the proxy
let simpleCatProxy = SimpleCatRequestProxy()
let cat = simpleCatProxy.getCat(Config.RandomCatURL, name: &amp;quot;Cat Ada&amp;quot;)
cat?.view&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/remote.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1030&quot; src=&quot;/assets/wp-content/uploads/2015/07/remote.png&quot; alt=&quot;remote&quot; width=&quot;744&quot; height=&quot;298&quot; /&gt;&lt;/a&gt;The next is the Clone (cache) Cat Proxy. He will create a local clone once he got a cat from the remote cat house. When others request the cat, he will first look at his cloned list. If the clone exists, he will return a clone. If not, he will get the cat from the remote cat house.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;class ClonedCatRequestProxy: SimpleCatRequest {
    private let semaphore = dispatch_semaphore_create(0)
    private let queue = dispatch_queue_create(&amp;quot;remoteCatQ&amp;quot;, DISPATCH_QUEUE_SERIAL)
    private var clonedCats:[String : Cat] = [:]
    
    func getCat(url: String, name: String) -&amp;amp;gt; Cat? {
        print(&amp;quot;Trying to get \(name) from the ClonedCatProxy&amp;quot;)
        var cat: Cat?
        dispatch_sync(queue) { () -&amp;amp;gt; Void in
            if let clonedCat = self.clonedCats[name] {
                cat = clonedCat
                print(&amp;quot;We already got \(name). No need to get remotely&amp;quot;)
            } else {
                guard let url: NSURL = NSURL(string:url) else { return }
                let task = NSURLSession.sharedSession().dataTaskWithURL(url) {
                    (data, _, _) -&amp;amp;gt; Void in
                     cat = Cat(name: name, image: UIImage(data: data!))
                    self.clonedCats[name] = cat
                    print(&amp;quot;Got \(name) from remote \n&amp;quot;)
                    dispatch_semaphore_signal(self.semaphore)
                }
                task?.resume()
                dispatch_semaphore_wait(self.semaphore, DISPATCH_TIME_FOREVER)
            }
        }
        return cat
    }
}

let cloneCatProxy = ClonedCatRequestProxy()
let catBebe = cloneCatProxy.getCat(Config.RandomCatURL, name: &amp;quot;Cat Bebe&amp;quot;)
let catDodo = cloneCatProxy.getCat(Config.RandomCatURL, name: &amp;quot;Cat Dodo&amp;quot;)
let catDidi = cloneCatProxy.getCat(Config.RandomCatURL, name: &amp;quot;Cat Didi&amp;quot;)

let catDidiClone = cloneCatProxy.getCat(Config.RandomCatURL, name: &amp;quot;Cat Dodo&amp;quot;)
catBebe?.view

catDodo?.view
catDidiClone?.view

catDidi?.view&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-1035&quot; src=&quot;/assets/wp-content/uploads/2015/07/cached.png&quot; alt=&quot;cached&quot; width=&quot;774&quot; height=&quot;874&quot; /&gt; The third one is Batch (Virtual) Cat Proxy. When people request cats, he simply writes down their requests and later fetch the cats from remote cat house in a big batch.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;protocol BatchCatRequest {
    init(url: String, numberOfCats: Int)
    func getCat(name: String, callback: (String: Cat) -&amp;amp;gt; Void)
    func execute()
}

class BatchCatRequestProxy: BatchCatRequest {
    let url: String
    var batchedCatRequest:[String: (Cat) -&amp;amp;gt; Void] = [:]
    
    required init(url: String, numberOfCats: Int = 1){
        self.url = url
    }
    func getCat(name: String, callback: (String: Cat)  -&amp;amp;gt; Void) {
        batchedCatRequest[name] = callback
    }
    func execute() {
        guard let url: NSURL = NSURL(string:url) else { return }
        
        let task = NSURLSession.sharedSession().dataTaskWithURL(url) {
            (data, _, _) -&amp;amp;gt; Void in
            print(&amp;quot;\n Trying to get \(self.batchedCatRequest.keys.array) from the BatchCatProxy&amp;quot;)
            for (name, callback) in self.batchedCatRequest {
                let cat = Cat(name: name, image: UIImage(data: data!))
                callback(cat)
                print(&amp;quot;Got \(name) from remote \n&amp;quot;)
            }
        }
        task?.resume()
    }
}

let batchCatProxy = BatchCatRequestProxy(url: Config.RandomCatURL)
batchCatProxy.getCat(&amp;quot;Xixi1&amp;quot;){
    $0.view
    
}

batchCatProxy.getCat(&amp;quot;DongDong1&amp;quot;) { (cat) -&amp;amp;gt; Void in
    cat.view!
}
batchCatProxy.execute()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/batchProxydefer.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1034&quot; src=&quot;/assets/wp-content/uploads/2015/07/batchProxydefer.png&quot; alt=&quot;batchProxy(defer)&quot; width=&quot;778&quot; height=&quot;1066&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first Batch Cat Proxy always retrieves the same cats remotely but people want different cats. So they go to the batch unique cat proxy, who keeps a number of different options of cats.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;class BatchUniqueCatRequestProxy: BatchCatRequest {
    var catURLs:[String] = []
    var batchedCatRequest:[String: (Cat) -&amp;amp;gt; Void] = [:]
    
    required init(url: String, numberOfCats: Int){
        let fullURL = &amp;quot;\(url)\(numberOfCats)&amp;quot;
        self.catURLs = getCatURLs(fullURL)
    }
    func getCat(name: String, callback: (String: Cat)  -&amp;amp;gt; Void) {
        batchedCatRequest[name] = callback
    }
    func execute() {
        if catURLs.count &amp;amp;gt; 0 &amp;amp;&amp;amp; batchedCatRequest.count &amp;amp;gt; 0 &amp;amp;&amp;amp; catURLs.count &amp;amp;gt; batchedCatRequest.count {
            var i = 0
             print(&amp;quot;\n Trying to get \(self.batchedCatRequest.keys.array) from the BatchUniqueCatProxy&amp;quot;)
            for (name, callback) in self.batchedCatRequest {
                guard let url: NSURL = NSURL(string:self.catURLs[i]) else { return }
                print(&amp;quot;&amp;quot;)
                let task = NSURLSession.sharedSession().dataTaskWithURL(url) {
                    (data, _, _) -&amp;amp;gt; Void in
                    let cat = Cat(name: name, image: UIImage(data: data!))
                    print(&amp;quot;Got \(name) from remote \n&amp;quot;)
                    callback(cat)
                }
                i++
                task?.resume()
            }
        }
    }
    
    private func getCatURLs(url: String) -&amp;amp;gt; [String] {
        var urls:[String] = []
        do {
            let str = try String(contentsOfURL: NSURL(string: url)!, encoding: NSUTF8StringEncoding)
            let xml1 = SWXMLHash.parse(str)
            let images = xml1[&amp;quot;response&amp;quot;][&amp;quot;data&amp;quot;][&amp;quot;images&amp;quot;][&amp;quot;image&amp;quot;].all
            
            for image in images {
                if let str:String = image[&amp;quot;url&amp;quot;].element?.text {
                    let url = str.stringByReplacingOccurrencesOfString(&amp;quot;\n&amp;quot;,withString: &amp;quot;&amp;quot;).stringByReplacingOccurrencesOfString(&amp;quot; &amp;quot;, withString: &amp;quot;&amp;quot;)
                    urls.append(url)
                }
            }
        } catch {
            print(&amp;quot;error getting the cat urls &amp;quot;)
        }
         return urls
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/batchUnique.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1031&quot; src=&quot;/assets/wp-content/uploads/2015/07/batchUnique.png&quot; alt=&quot;batchUnique&quot; width=&quot;895&quot; height=&quot;676&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last one is the Secure(Protection) Proxy.  He is always quite serious and have to check everybody&amp;#8217;s &amp;#8220;passcode&amp;#8221; before giving them any cats.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;class UserAuthentication {
    var user:String?;
    var authenticated:Bool = false;
    
    private init() {
        // do nothing - stops instances being created
    }
    
    func authenticate(user:String, pass:String) {
        if (pass == &amp;quot;secret&amp;quot;) {
            self.user = user;
            self.authenticated = true;
            print(&amp;quot;user authenticated&amp;quot;)
        } else {
            self.user = nil;
            self.authenticated = false;
            print(&amp;quot;user not authenticated&amp;quot;)
        }
    }
    
   static let sharedInstance: UserAuthentication = UserAuthentication()
}
//:ControlAccessProxy 
class SecuredCatRequestProxy: BatchCatRequest {
    private let wrapperObject: BatchCatRequest
    required init(url: String, numberOfCats: Int = 1){
        wrapperObject = BatchCatRequestProxy(url: url)
    }
    func getCat(name: String, callback: (String: Cat) -&amp;amp;gt; Void) {
        wrapperObject.getCat(name, callback: callback)
    }
    func execute() {
        if UserAuthentication.sharedInstance.authenticated {
            wrapperObject.execute()
        } else {
            print(&amp;quot;Can&amp;#39;t get cat if you are not authorized&amp;quot;)
            fatalError(&amp;quot;Can&amp;#39;t get cat if you are not authorized&amp;quot;)
        }
    }
}



let secureProxy = SecuredCatRequestProxy(url: Config.RandomCatURL)
secureProxy.getCat(&amp;quot;XixiSecure&amp;quot;){
    $0.view
}

UserAuthentication.sharedInstance.authenticate(&amp;quot;Jane&amp;quot;, pass: &amp;quot;secret&amp;quot;)
secureProxy.execute()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/secure.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1032&quot; src=&quot;/assets/wp-content/uploads/2015/07/secure.png&quot; alt=&quot;secure&quot; width=&quot;848&quot; height=&quot;595&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The rest of the code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;import Foundation
import UIKit
import XCPlayground
XCPSetExecutionShouldContinueIndefinitely(true)

func getCat(state:CatNames, caption: String) -&amp;amp;gt; UIView{
    let image = UIImage(named: state.rawValue)
    return getCatView(image!, caption: caption)
}
func getCatView(image: UIImage, caption: String) -&amp;amp;gt; UIView {
    let view = UIView(frame: CGRectMake(0, 0, 400, 300))
    view.clipsToBounds = true
    let labelView = UILabel(frame: CGRectMake(0, 10, 400, 100))
    labelView.text = caption
    labelView.numberOfLines = 0
    labelView.lineBreakMode = NSLineBreakMode.ByWordWrapping
    labelView.font = labelView.font.fontWithSize(30)
    labelView.textColor = UIColor.redColor()
    labelView.textAlignment = NSTextAlignment.Center
    let imageView = UIImageView(image: image)
    imageView.frame = view.frame
    imageView.contentMode = UIViewContentMode.ScaleAspectFit
    view.addSubview(imageView)
    view.addSubview(labelView)
    return view
    
}

struct Cat:CustomStringConvertible {
    let name: String
    var image: UIImage?
    var description: String {
        let str = image == nil ? &amp;quot;Still requesting&amp;quot; : &amp;quot;Got it&amp;quot;
        return &amp;quot;\(name) (\(str))&amp;quot;
    }
    var view: UIView? {
        let tempImage = image ?? UIImage(named: &amp;quot;catPlaceholder.jpg&amp;quot;)
        return getCatView(tempImage!, caption: name)
    }
}
struct Config{
    static let RandomCatURL = &amp;quot;http://thecatapi.com/api/images/get?format=src&amp;amp;type=gif&amp;quot;
    static let RandomCatGroupURLPrefix = &amp;quot;http://thecatapi.com/api/images/get?format=xml&amp;amp;results_per_page=&amp;quot;
}
enum CatNames:String {
    case Bored = &amp;quot;bored.jpg&amp;quot;
    case Happy = &amp;quot;happy.jpg&amp;quot;
    case PlaceHolder = &amp;quot;catPlaceholder.jpg&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The proxy pattern is used to provide a surrogate or placeholder object, which references an underlying object. The proxy provides the same public interface as the underlying subject class, adding a level of indirection by accepting requests from a client object and passing these to the real subject object as necessary. &amp;#8212; &lt;strong&gt;&lt;em&gt;Gang Of Four&lt;/em&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;More info:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Remote Proxy&lt;/strong&gt; – Represents an object locally which belongs to a different address space. Think of an ATM implementation, it will hold proxy objects for bank information that exists in the remote server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Virtual Proxy&lt;/strong&gt; – In place of a complex or heavy object, use a skeleton representation. When an underlying image is huge in size, just represent it using a virtual proxy object and on demand load the real object. You know that the real object is expensive in terms of instantiation and so without the real need we are not going to use the real object. Until the need arises we will use the virtual proxy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Protection Proxy&lt;/strong&gt; – Are you working on an MNC? If so, we might be well aware of the proxy server that provides us internet by restricting access to some sort of websites like public e-mail, social networking, data storage etc. The management feels that, it is better to block some content and provide only work related web pages. Proxy server does that job. This is a type of proxy design pattern. &amp;#8212; &lt;em&gt;Wiki&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ref: &lt;a href=&quot;www.apress.com/9781484203958&quot;&gt;Design Pattern in Swift&lt;/a&gt;&lt;br&gt;
Cat API: &lt;a href=&quot;http://thecatapi.com/&quot;&gt;http://thecatapi.com/&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift – Chapter 11: State</title>
   <link href="localhost:4000/2015/07/05/a-design-pattern-story-in-swift-chapter-11-state/"/>
   <updated>2015-07-05T00:00:00-07:00</updated>
   <id>localhost:4000/2015/07/05/a-design-pattern-story-in-swift-chapter-11-state</id>
   <content type="html">&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;HouseOfFlower is hosting a betting sale. People can use a blue diamond to start a bet. If they win the bet, they&amp;#8217;ll get one flower. &lt;/span&gt;The &amp;#8220;FlowerHouseContext&amp;#8221; is trying to keep a record of the business by using the four states: NoDiamond, HasDiamond, Sold, Soldout.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p class=&quot;p1&quot;&gt;
  The state pattern is used to alter the behaviour of an object as its internal state changes. The pattern allows the class for an object to apparently change at run-time. &lt;a href=&quot;https://github.com/ochococo/Design-Patterns-In-Swift&quot;&gt;From&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;class FlowerHouseContext: CustomStringConvertible {
    // need a special inital state, but really no use here
    private var state: State = NoDiamondState()
    private var numberOfFlowers: Int = 5
    private var gotDiamond = false
    private var wonBet = false
    private var totalReceivedDiamonds: Int = 0
    
    var description:String { return &amp;quot;--FlowerHouse: total flowers: \(numberOfFlowers)@, total diamonds:\(totalReceivedDiamonds)#&amp;quot;
    }
    
    func receiveDiamond(){
        if numberOfFlowers &amp;amp;lt;= 0 {
            state = SoldOutState()
            state.getFlower(self)
        } else {
            state.giveDiamond(self)
            state = HasDiamondState()
            gotDiamond = true
            totalReceivedDiamonds++
        }
    }

    func startBet(){
        if !gotDiamond {
            state.willGiveDiamond()
        } else {
            if arc4random_uniform(2) == 1 {
                wonBet = true
            } else {
                print(&amp;quot;You lose the bet, no flowers&amp;quot;)
                state = NoDiamondState()
                gotDiamond = false
            }
        }
    }
    
    func giveFlower(){
        if gotDiamond &amp;amp;&amp;amp; wonBet {
            numberOfFlowers--
            state = SoldState()
            state.getFlower(self)
            print(description)
            state = NoDiamondState()
            gotDiamond = false
            wonBet = false
        } else {
            if let _ = state as? HasDiamondState {
                print(&amp;quot;You&amp;#39;ll need to start a bet to get a flower&amp;quot;)
            } else {
                print(state.description)
            }
        }
    }
}

//: the context Parameter is not necessary here, but maybe for future usage.
protocol State: CustomStringConvertible {
    func willGiveDiamond()
    func giveDiamond(context: FlowerHouseContext)
    func startBet(context: FlowerHouseContext)
    func getFlower(context: FlowerHouseContext)
}


class NoDiamondState:State {
    var description:String {return &amp;quot;No diamond yet. Need to give one&amp;quot;}
    func willGiveDiamond(){
        print(&amp;quot;You need to give a diamond to start the bet&amp;quot;)
    }
    func giveDiamond(context: FlowerHouseContext) {
         print(&amp;quot;You are giving a diamond&amp;quot;)
    }
    func startBet(context: FlowerHouseContext) {
        print(&amp;quot;Can&amp;#39;t start bet without a diamond&amp;quot;)
    }
    func getFlower(context: FlowerHouseContext) {
        print(&amp;quot;Can&amp;#39;t get flower without a diamond&amp;quot;)
    }
}

class HasDiamondState:State {
    var description:String {return &amp;quot;You gave one diamond. Will start the bet&amp;quot;}
    func willGiveDiamond(){
        print(&amp;quot;You already gave a diamond&amp;quot;)
    }
    func giveDiamond(context: FlowerHouseContext) {
        print(&amp;quot;You already gave a diamond&amp;quot;)
    }
    func startBet(context: FlowerHouseContext) {
        print(&amp;quot;The best is starting&amp;quot;)
    }
    func getFlower(context: FlowerHouseContext) {
        print(&amp;quot;No bet, no flower&amp;quot;)
    }
}

class SoldState:State {
    var description: String {return &amp;quot;You won the bet, will give you a flower&amp;quot;}
    func willGiveDiamond(){
       print(&amp;quot;You already gave a diamond&amp;quot;)
    }
    func giveDiamond(context: FlowerHouseContext) {
        print(&amp;quot;You already gave a diamond&amp;quot;)
    }
    func startBet(context: FlowerHouseContext) {
        print(&amp;quot;The bet is already over&amp;quot;)
    }
    func getFlower(context: FlowerHouseContext) {
        print(&amp;quot;you won the bed and you get one flower&amp;quot;)
    }
}

class SoldOutState:State {
    var description:String {return &amp;quot;Sold out, come back later&amp;quot;}
    func willGiveDiamond(){
        print(&amp;quot;Sold out, come back later&amp;quot;)
    }
    func giveDiamond(context: FlowerHouseContext) {
        print(&amp;quot;Sold out, come back later&amp;quot;)
    }
    func startBet(context: FlowerHouseContext) {
        print(&amp;quot;Sold out, come back later&amp;quot;)
    }
    func getFlower(context: FlowerHouseContext) {
        print(&amp;quot;Sold out, come back later&amp;quot;)
    }
}

//:Testing
let context = FlowerHouseContext()
print(context)
context.receiveDiamond()
context.startBet()
context.giveFlower()
print(&amp;quot;\n&amp;quot;)

context.startBet()
context.receiveDiamond()
context.startBet()
context.giveFlower()

print(&amp;quot;\n&amp;quot;)

context.startBet()
context.giveFlower()

print(&amp;quot;\n&amp;quot;)
context.receiveDiamond()
context.giveFlower()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/state.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1027&quot; src=&quot;/assets/wp-content/uploads/2015/07/state.png&quot; alt=&quot;state&quot; width=&quot;394&quot; height=&quot;272&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift – Chapter 10: Composite</title>
   <link href="localhost:4000/2015/07/05/a-design-pattern-story-in-swift-chapter-10-composite/"/>
   <updated>2015-07-05T00:00:00-07:00</updated>
   <id>localhost:4000/2015/07/05/a-design-pattern-story-in-swift-chapter-10-composite</id>
   <content type="html">&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;There is a MagicConference and all kinds of characters can participate by purchasing SinglePass or GroupPass.&lt;/span&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p class=&quot;p1&quot;&gt;
  The composite pattern is used to create hierarchical, recursive tree structures of related objects where any element of the structure may be accessed and utilized in a standard manner.  &lt;em&gt;&lt;a href=&quot;https://github.com/ochococo/Design-Patterns-In-Swift&quot;&gt;From&lt;/a&gt;&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;protocol Pass:CustomStringConvertible{
    var name: String { get }
    var price: Int { get }
    var countNumber: Int { get }
}

struct SinglePass: Pass {
    let name: String
    let price: Int
    var countNumber: Int { return 1 }
    var description: String { return &amp;quot;\(name) (Single Pass \(price)#)&amp;quot; }
}
struct GroupPass: Pass {
    let name: String
    var passes:[Pass]
    var countNumber: Int {
        return passes.map{$0.countNumber}.reduce(0, combine: +)
    }
    var description: String {
        var str = &amp;quot;\(name) (Group Pass \(price)#)&amp;quot;
        str += passes.map{$0.name}.reduce(&amp;quot;&amp;quot;, combine: {$0 + &amp;quot;\n&amp;quot; + $1})
        return str + &amp;quot;\n&amp;quot;
    }
    var price: Int {
        return passes.map{$0.price}.reduce(0, combine: +)
    }
    mutating func addPass(pass: Pass){
        passes.append(pass)
    }
}

//: The ConfHost oversees the conference, including total passes, total number of participants, costs, etc.
class ConfHost{
    private var passes: [Pass] = []
    init(passes: Pass...){
        self.passes = passes
    }
    func printParticipantList(){
        passes.map{print($0.description)}
    }
    var totalPrice: Int {
        return passes.map{$0.price}.reduce(0, combine: +)
    }
    var totalNumberOfParticipants: Int {
        return passes.map{$0.countNumber}.reduce(0, combine: +)
    }
    
    func getConfOverview(){
        print(&amp;quot;MagicConf has sold \(passes.count) passes for \(totalNumberOfParticipants) participants&amp;quot;)
        printParticipantList()
        print(&amp;quot;Total Revenue: \(totalPrice)#&amp;quot;)
    }
    
}

//: Just a helper extension
extension Int {
    func times(action: (Int)-&amp;amp;gt;()) {
        for i in 0..&amp;amp;lt;self {
            action(i)
        }
    }
}
//: Adding 7 dwarfs
var dwarfGroup = GroupPass(name: &amp;quot;Dwarf Group&amp;quot;, passes: [])
7.times { dwarfGroup.addPass(SinglePass(name: &amp;quot;Dwarf # \($0)&amp;quot;, price: 10))}

let singleP1 = SinglePass(name: &amp;quot;Cinderela&amp;quot;, price: 12)
let singleP2 = SinglePass(name: &amp;quot;SnowWhite&amp;quot;, price: 10)
let singleP3 = SinglePass(name: &amp;quot;The Wicked Witch&amp;quot;, price: 10)

let groupP1 = GroupPass(name: &amp;quot;Beauty Group&amp;quot;, passes: [singleP1, singleP2])

let confHost = ConfHost(passes: groupP1, singleP3, dwarfGroup)
confHost.getConfOverview()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/composite.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1021&quot; src=&quot;/assets/wp-content/uploads/2015/07/composite.png&quot; alt=&quot;composite&quot; width=&quot;354&quot; height=&quot;240&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift – Chapter 9: Iterator(Sequence and Generator)</title>
   <link href="localhost:4000/2015/07/04/a-design-pattern-story-in-swift-chapter-9-iteratorsequence-and-generator/"/>
   <updated>2015-07-04T00:00:00-07:00</updated>
   <id>localhost:4000/2015/07/04/a-design-pattern-story-in-swift-chapter-9-iteratorsequence-and-generator</id>
   <content type="html">&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt; There is a restaurant with two kinds of menus: one for their VIP guests and one for customers who just want average fastfood. The two menus are in different format and one waitress has to be able to process both menus, in a simple way.&lt;/span&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p class=&quot;p1&quot;&gt;
  Iterator provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation. &lt;em&gt; &amp;#8212; HeadFirst&lt;/em&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;struct MenuItem: CustomStringConvertible{
    let name: String
    let price: Int
    let isVegetable: Bool
    var description: String {
        let vegi = isVegetable ? &amp;quot;Vegi&amp;quot; : &amp;quot;&amp;quot;
        return  &amp;quot;\(name): (\(price)#) \(vegi) \n&amp;quot;  }
}

//: helper protocols. Hashable and Equatable is necesary for storing MenuItem in a Set
extension MenuItem: Hashable, Equatable{
    var hashValue: Int {
        return name.hashValue ^ price.hashValue
    }
}
func ==(lhs:MenuItem, rhs:MenuItem) -&amp;amp;gt; Bool {
    return lhs.name == rhs.name
}


protocol PrettyDescription: CustomStringConvertible {
    var prettyDescription: String { get }
}

//: provide default implementation to describe the elements of the sequence. As the PrettyDescription inherit CustomStringConvertible, we can safely downcast the sequence elements to CustomStringConvertible
extension PrettyDescription where Self: protocol &amp;amp;lt;SequenceType&amp;amp;gt; {
    var prettyDescription: String {
        var temStr = &amp;quot;\nMenu Items:\n&amp;quot;
        self.map{temStr += ($0 as! CustomStringConvertible).description} 
        return temStr
    }
}

//: how next element is generated from a MenuItem Array
struct MenuGeneratorFromArray: GeneratorType {
    let menuItems:[MenuItem]
    var index = 0
    mutating func next() -&amp;amp;gt; MenuItem? {
        return index &amp;amp;lt; menuItems.count ? menuItems[index++] : nil
    }
}

//: how next element is generated from a MenuItem Set
struct MenuGeneratorFromSet: GeneratorType {
    let menuItems:Set&amp;amp;lt;MenuItem&amp;amp;gt;
    var index = 0
    mutating func next() -&amp;amp;gt; MenuItem? {
        return index &amp;amp;lt; (menuItems.count) ? menuItems[advance(menuItems.startIndex, index++)] : nil
    }
}

//: The VIPMenu using Array
struct VIPMenu:SequenceType, PrettyDescription {
    var menuItems:[MenuItem] = []
    var description: String { return &amp;quot;VIP Menu&amp;quot; + prettyDescription }
    func generate() -&amp;amp;gt; MenuGeneratorFromArray {
        return MenuGeneratorFromArray(menuItems: menuItems, index: 0)
    }
    func underestimateCount() -&amp;amp;gt; Int { return menuItems.count }
    
    init(){
        addItem(&amp;quot;Tiran Goose&amp;quot;, price: 10)
        addItem(&amp;quot;Fairy Cake&amp;quot;, price: 13)
        addItem(&amp;quot;Heaven Grass&amp;quot;, price: 4, isVegetable: true)
        print(&amp;quot;VIPMenu Created&amp;quot;)
    }
    mutating func addItem(name: String, price: Int, isVegetable:Bool = false){
        let item = MenuItem(name: name, price: price, isVegetable: isVegetable)
        menuItems.append(item)
    }
}

//: The FastfoodMenu using Set
class FastfoodMenu: SequenceType, PrettyDescription {
    var menuItems = Set&amp;amp;lt;MenuItem&amp;amp;gt;()
    var description: String { return &amp;quot;Fastfood Menu&amp;quot; + prettyDescription }
    var nextIndex = -1
    func generate() -&amp;amp;gt; MenuGeneratorFromSet {
        return MenuGeneratorFromSet(menuItems: menuItems, index: 0)
    }
    func underestimateCount() -&amp;amp;gt; Int { return menuItems.count }
    
    init(){
        addItem(&amp;quot;Cheese Cake&amp;quot;, price: 10)
        addItem(&amp;quot;Lettus&amp;quot;, price: 4, isVegetable: true)
        addItem(&amp;quot;Ham&amp;quot;, price: 13)
        print(&amp;quot;FastfoodMenu Created&amp;quot;)
    }
    func addItem(name: String, price: Int, isVegetable:Bool = false){
        let item = MenuItem(name: name, price: price, isVegetable: isVegetable)
        menuItems.insert(item)
    }
}

//: Every waitress has two menus at hand and they can print the menus
class Waitress {
    let vipMenu: VIPMenu
    let fastfoodMenu: FastfoodMenu
    init(vipMenu: VIPMenu, fastfoodMenu: FastfoodMenu){
        self.vipMenu = vipMenu
        self.fastfoodMenu = fastfoodMenu
        print(&amp;quot;Waitress with two menus created&amp;quot;)
    }
    func printMenu() {
        print(&amp;quot;\nWaitress is printing the menu&amp;quot;)
        let menus:[CustomStringConvertible] = [vipMenu, fastfoodMenu]
        menus.map{print($0)}
    }
}


//:Testing
var vipMenu = VIPMenu()
var fastfoodMenu = FastfoodMenu()

let waitress = Waitress(vipMenu: vipMenu, fastfoodMenu: fastfoodMenu)
waitress.printMenu()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/iterator.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1013&quot; src=&quot;/assets/wp-content/uploads/2015/07/iterator.png&quot; alt=&quot;iterator&quot; width=&quot;238&quot; height=&quot;249&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift – Chapter 8: Template</title>
   <link href="localhost:4000/2015/07/04/a-design-pattern-story-in-swift-chapter-8-template/"/>
   <updated>2015-07-04T00:00:00-07:00</updated>
   <id>localhost:4000/2015/07/04/a-design-pattern-story-in-swift-chapter-8-template</id>
   <content type="html">&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;There is very little difference between magic and art. It&amp;#8217;s an act to create something from nothing. &lt;/span&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt; The template method pattern is a behavioral design pattern that defines the program skeleton of an algorithm in a method, called template method, which defers some steps to subclasses. &amp;#8211; Wiki&lt;/span&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&quot;lang:swift decode:true &quot; title=&quot;Template&quot;&gt;protocol MagicRecipe {
    var isDarkMagic: Bool { get }
    func makeMagic()
    func addSpecialIngredience()
    func testMagic()
}

//: create the template for making the Magic Recipe. All whiteMagic needs to be tested before being released.
extension MagicRecipe {
    final func makeMagic(){
        print(&quot;Starting the magic-making process...&quot;)
        addSpecialIngredience()
        if !isDarkMagic {
           testMagic()
        }
        let magicType = isDarkMagic ? &quot;Dark Magic&quot; : &quot;White Magic&quot;
        print(&quot;A new \(magicType) is created! \n&quot;)
    }
}

//: The magic recipe for getting love
 class MagicRecipeForLove: MagicRecipe {
    var isDarkMagic: Bool
    var name: String
    var description: String { return name }
    init(isDarkMagic: Bool = false, name: String){
        self.isDarkMagic = isDarkMagic
        self.name = name
        print(&quot;Creating the magic: \(name)&quot;)
    }
    func addSpecialIngredience() {
        let ingredience = isDarkMagic ? &quot;black diamond&quot; : &quot;red diamond&quot;
        print(&quot;Adding \(ingredience) as special ingredience&quot;)
    }
    func testMagic() {
        print(&quot;testMagicing \(name)&quot;)
    }
}

//: Sleep Magic is always bad (dark magic)
 class MagicRecipeForSleep: MagicRecipe {
    var isDarkMagic: Bool { return true }
    var name: String
    var description: String { return name }
    init(name: String){
        self.name = name
        print(&quot;Creating the magic: \(name)&quot;)
    }
    func addSpecialIngredience() {
        print(&quot;Adding tears from the black witch as special ingredience&quot;)
    }
    func testMagic() {
        print(&quot;testMagicing \(name)&quot;)
    }
}


let l1 = MagicRecipeForLove(name: &quot;Long Lasting Love&quot;)
l1.makeMagic()
let l2 = MagicRecipeForLove(isDarkMagic: true, name: &quot;Crazy Stupid Love&quot;)
l2.makeMagic()
let s1 = MagicRecipeForSleep(name: &quot;Sleeping in Emptiness&quot;)
s1.makeMagic()
let s2 = MagicRecipeForSleep(name: &quot;Sleeping and Dreaming&quot;)
s2.makeMagic()&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://audreyli.me/wp-content/uploads/2015/07/template.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1006&quot; src=&quot;http://audreyli.me/wp-content/uploads/2015/07/template.png&quot; alt=&quot;template&quot; width=&quot;390&quot; height=&quot;275&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift – Chapter 7: Adaptor &#038; Facade</title>
   <link href="localhost:4000/2015/07/04/a-design-pattern-story-in-swift-chapter-7-adaptor-facade/"/>
   <updated>2015-07-04T00:00:00-07:00</updated>
   <id>localhost:4000/2015/07/04/a-design-pattern-story-in-swift-chapter-7-adaptor-facade</id>
   <content type="html">&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;We all have our innermost dream. Sometimes it becomes true, sometimes it doesn&amp;#8217;t.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;When you see the tears in my eyes, that&amp;#8217;s because my dream is broken. &lt;/span&gt;
&lt;/p&gt;

&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;Fate often has its own play. We never know for sure.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&quot;p1&quot;&gt;
  
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;//: we all have dreams
protocol Dreamful{
    func dream()
}
//: we all express our emotions
protocol Expressful {
    func expressEmotion()
}

protocol Aged {
    var age: Int { get }
}
protocol DreamRealizable {
    var isDreamRealized: Bool { get set}
}

//: some arbitrary class that we can&amp;#39;t change (assume)
class LittlePrince{
    var princeAge = 102
    var isDreamRealized = true
    func seeFlower(){
        print(&amp;quot;Prince&amp;#39;s dream is to see my flowers everyday&amp;quot;)
    }
}

class Angel {
     var isDreamRealized = true
    var angelAge = 121
    func fall(){
        print(&amp;quot;Angel&amp;#39;s dream is to fall on the earth and experience life&amp;quot;)
    }
}

class AryaStark {
    var isDreamRealized = false
    var humanAge = 13
    func revenge(){
        print(&amp;quot;Arya&amp;#39;s dream is to take revenge for the Stalk Family&amp;quot;)
    }
}

//: just a convenient extension so that the arbitrary class of people can express themselves
extension LittlePrince: Expressful{
    func expressEmotion(){
        if isDreamRealized {
            print(&amp;quot;Little Prince is quite happy&amp;quot;)
        } else {
            print(&amp;quot;Little Prince is very sad&amp;quot;)
        }
    }
}
extension AryaStark: Expressful{
    func expressEmotion(){
        if isDreamRealized {
            print(&amp;quot;Arya is quite happy&amp;quot;)
        } else {
            print(&amp;quot;Arya is very sad&amp;quot;)
        }
    }
}
extension Angel: Expressful{
    func expressEmotion(){
        if isDreamRealized {
            print(&amp;quot;Angel is quite happy&amp;quot;)
        } else {
            print(&amp;quot;Angel is very sad&amp;quot;)
        }
    }
}


//: The core adaptor. Even Arbitrary, we are all people with dreams
class PersonWithDreamAdapter: Aged, Dreamful, CustomStringConvertible{
    private let person: AnyObject
    var age: Int {
        if person.isKindOfClass(LittlePrince) { return (person as! LittlePrince).princeAge }
        else if person.isKindOfClass(AryaStark) { return(person as! AryaStark).humanAge }
        else { return (person as! Angel).angelAge }
    }
    
    var description: String {
        if person.isKindOfClass(LittlePrince) { return &amp;quot;I am a prince and I am \(age) years&amp;#39; old&amp;quot; }
        else if person.isKindOfClass(AryaStark)  { return &amp;quot;I am AryaStark and I am \(age) years&amp;#39; old&amp;quot; }
        else  { return &amp;quot;I am an angel and I am \(age) years&amp;#39; old&amp;quot; }

    }
    init(person: AnyObject){
        print(&amp;quot;Adapting \(person)&amp;quot;)
        if person.isKindOfClass(LittlePrince) || person.isKindOfClass(AryaStark) || person.isKindOfClass(Angel) {
            self.person = person
        } else {
            fatalError(&amp;quot;Unexpected type of person&amp;quot;)
        }
    }
    
    func dream() {
        if person.isKindOfClass(LittlePrince) { (person as! LittlePrince).seeFlower()}
        else if person.isKindOfClass(AryaStark) {(person as! AryaStark).revenge() }
        else if person.isKindOfClass(Angel) { (person as! Angel).fall() }
    }
}


//: The GodOfDreamsFacade can manage everybody&amp;#39;s dreams in a batch
class GodOfDreamsFacade{
    let prince: LittlePrince
    let angel: Angel
    let arya: AryaStark
    init(prince: LittlePrince, angel: Angel, arya: AryaStark){
        self.prince = prince
        self.angel = angel
        self.arya = arya
        
    }
    func checkDreamState(){
        print(&amp;quot;-----checking everybody&amp;#39;s dreams-----&amp;quot;)
        prince.seeFlower()
        angel.fall()
        arya.revenge()
        expressEmotion()
       
    }
    func crushDreams(){
        print(&amp;quot;-----GodOfDreamsFacade is crushing everybody&amp;#39;s dreams-----&amp;quot;)
        prince.isDreamRealized = false
        angel.isDreamRealized = false
        arya.isDreamRealized = false
        expressEmotion()
    }
    
    private func expressEmotion() {
        prince.expressEmotion()
        angel.expressEmotion()
        arya.expressEmotion()
    }
    
}

//: Testing the adaptor
print(&amp;quot;\n Using Adapter&amp;quot;)
let prince = LittlePrince()
let s1 = PersonWithDreamAdapter(person: prince)
let arya = AryaStark()
let angel = Angel()
print(s1)
s1.dream()
let s2 = PersonWithDreamAdapter(person: arya)
print(s2)
s2.dream()
let s3 = PersonWithDreamAdapter(person: angel)
print(s3)
s3.dream()

//: Testing the facade
print(&amp;quot;\n Using Facade&amp;quot;)
let facade = GodOfDreamsFacade(prince: prince, angel: angel, arya: arya)
facade.checkDreamState()
facade.crushDreams()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

  
  &lt;p&gt;
    &lt;a href=&quot;/assets/wp-content/uploads/2015/07/adaptor-facade.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1001&quot; src=&quot;/assets/wp-content/uploads/2015/07/adaptor-facade.png&quot; alt=&quot;adaptor facade&quot; width=&quot;413&quot; height=&quot;330&quot; /&gt;&lt;/a&gt;
  &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift – Chapter 6: Command</title>
   <link href="localhost:4000/2015/07/03/a-design-pattern-story-in-swift-chapter-6-command/"/>
   <updated>2015-07-03T00:00:00-07:00</updated>
   <id>localhost:4000/2015/07/03/a-design-pattern-story-in-swift-chapter-6-command</id>
   <content type="html">&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;If you command wisely, you&amp;#8217;ll be obeyed cheerfully.&lt;span class=&quot;Apple-converted-space&quot;&gt;  &lt;/span&gt;&amp;#8212; &lt;em&gt;Thomas Fuller&lt;/em&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;div class=&quot;page&quot; title=&quot;Page 393&quot;&gt;
  &lt;div class=&quot;layoutArea&quot;&gt;
    &lt;div class=&quot;column&quot;&gt;
      &lt;p&gt;
        The command pattern is used to encapsulate details of how to invoke a method on an object in a way that allows the method to be invoked at a different time or by a different component. (&lt;em&gt;Design Pattern in Swift)&lt;/em&gt;
      &lt;/p&gt;
      
      
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;protocol Command {
    func execute(receiver: Any)
}

//: A generic command can handle different kind of commands
class GenericCommand&amp;amp;lt;T&amp;amp;gt;: Command {
    private var instruction: T -&amp;amp;gt; Void
    init(instruction: T -&amp;amp;gt; Void){
        self.instruction = instruction
    }
    func execute(receiver: Any) {
        guard let safeReceiver = receiver as? T else {
            fatalError(&amp;quot;Receiver is not an expected type&amp;quot;)
        }
        instruction(safeReceiver)
    }
    class func createCommand(instruction: T -&amp;amp;gt; Void) -&amp;amp;gt; Command {
        return GenericCommand(instruction: instruction)
    }
}

protocol LatestCommand {
    func executeLatestCommand(receiver: Any)
}

//: A commandWrapper manages the execution of multiple commands or the lastest command
class CommandWrapper: Command, LatestCommand {
    private let commands: [Command]
    private var remainingCommands:[Command]
    init(commands: [Command]){
        self.commands = commands
        self.remainingCommands = commands
    }
    func execute(receiver: Any) {
        print(&amp;quot;will excute all commands for \(receiver)&amp;quot;)
        commands.map{$0.execute(receiver)}
        
    }
    func executeLatestCommand(receiver: Any){
        print(&amp;quot;will execute the lastest command for \(receiver)&amp;quot;)
        remainingCommands.removeLast().execute(receiver)
        print(&amp;quot;\(remainingCommands.count) commands left.&amp;quot;)
    }
}

class PeopleStandByCommand: Command {
    func execute(receiver: Any) {
        print(&amp;quot;All people standby&amp;quot;)
    }
}
class PrepareWeaponCommand: Command {
    func execute(receiver: Any) {
        print(&amp;quot;Weapons are ready&amp;quot;)
    }
}

class PrepareResourcesCommand: Command {
    func execute(receiver: Any) {
        print(&amp;quot;All resources are ready&amp;quot;)
    }
}

//: An operation that has manages the preparation of the war. It creates multiple commands which will be executed at runtime
class PrepareForWarOperation:CustomStringConvertible {
    private var commands:[Command] = []
    private var queue = dispatch_queue_create(&amp;quot;arrayQueue&amp;quot;, DISPATCH_QUEUE_SERIAL)
    var name: String
    var description: String { return name }
    init(kindom: String){
        print(&amp;quot;PrepareForWar Operation for \(kindom) is created&amp;quot;)
        self.name = kindom
        prepareEverything()
    }
    func notifyPeople(people: String){
        print(&amp;quot;Notified \(people) about the war&amp;quot;)
    }
    
    func prepareEverything(){
        addCommand(PrepareForWarOperation.notifyPeople, people: &amp;quot;people of \(name)&amp;quot;)
        commands.append(PrepareResourcesCommand())
        commands.append(PrepareWeaponCommand())
        commands.append(PeopleStandByCommand())
    }

    private func addCommand(action: PrepareForWarOperation -&amp;amp;gt; String -&amp;amp;gt; Void, people: String){
        dispatch_sync(queue) { () -&amp;amp;gt; Void in
            self.commands.append(GenericCommand.createCommand({ prep  in
                action(prep)(people)
            }))
        }
    }
    func getACommandWrap() -&amp;amp;gt; protocol &amp;amp;lt;Command,LatestCommand&amp;amp;gt;? {
            var command: protocol &amp;amp;lt;Command,LatestCommand&amp;amp;gt;?
            dispatch_sync(queue) { () -&amp;amp;gt; Void in
                command = CommandWrapper(commands: self.commands)
            }
            return command
    }
}
//: Testing
let p1 = PrepareForWarOperation(kindom: &amp;quot;Daria&amp;quot;)
let commands = p1.getACommandWrap()
commands?.executeLatestCommand(p1)
commands?.execute(p1)
print(&amp;quot;\n&amp;quot;)

let p2 = PrepareForWarOperation(kindom: &amp;quot;Secila&amp;quot;)
print(&amp;quot;Use the same operation commands for another kindom called Secila&amp;quot;)
commands?.execute(p2)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

      
      &lt;p&gt;
        &amp;nbsp;
      &lt;/p&gt;
      
      &lt;p&gt;
        &lt;a href=&quot;/assets/wp-content/uploads/2015/07/com.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-998&quot; src=&quot;/assets/wp-content/uploads/2015/07/com.png&quot; alt=&quot;com&quot; width=&quot;459&quot; height=&quot;245&quot; /&gt;&lt;/a&gt;
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift – Chapter 5: Singleton</title>
   <link href="localhost:4000/2015/07/01/a-design-pattern-story-in-swift-chapter-5-singleton/"/>
   <updated>2015-07-01T00:00:00-07:00</updated>
   <id>localhost:4000/2015/07/01/a-design-pattern-story-in-swift-chapter-5-singleton</id>
   <content type="html">&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt; Long before the seven kingdoms were created, there was a pen &amp;#8211; a pen that can write stories into realities. In the vast universe, there is only one pen of this kind. &lt;/span&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;final class StoryPen: CustomStringConvertible {
    static let sharedInstance = StoryPen()
    private var storyBook:[String] = []
    var description: String {return &amp;quot;The Story Pen&amp;quot;}
    private init(){
       StoryTeller.sharedInstance.tell(&amp;quot;The Story Pen came to exist&amp;quot;)
    }
    func addAStory(story: String){
        storyBook.append(story)
    }
    func showStoryBook(){
        storyBook.map{StoryTeller.sharedInstance.tell($0)}
    }
    
}

final class StoryTeller {
    static let sharedInstance = StoryTeller(name: &amp;quot;August&amp;quot;)
    var name: String
    private init(name: String){
        self.name = name
        print(&amp;quot;The Story Teller \(name)is born and he tells stories to the world. Here it goes...&amp;quot;)
    }
    func tell(story: String){
        print(story)
    }
}


enum StoryType{
    case Love
    case Peace
    case Log
}
func storify(storyType: StoryType = .Log, subject: CustomStringConvertible, content: String){
    
    switch storyType {
    case .Log: StoryPen.sharedInstance.addAStory(&amp;quot;\(subject.description) // \(content)&amp;quot;)
    case .Peace: StoryPen.sharedInstance.addAStory(&amp;quot;A Story about Peace and \(subject.description)// \(content)&amp;quot;)
    case .Love: StoryPen.sharedInstance.addAStory(&amp;quot;A Story about Love and \(subject.description)// \(content)&amp;quot;)
    }
}
protocol Kindom: CustomStringConvertible {
    var name: String { get }
}

final class KindomOfDemon:Kindom {
    static let sharedInstance = KindomOfDemon(name: &amp;quot;The Kindom of Demon&amp;quot;)
    var name: String
    var description: String { return self.name }
    private init(name: String){
        self.name = name
        storify(subject: self, content: &amp;quot; created&amp;quot;)
    }
}
final class KindomOfGod:Kindom {
    static let sharedInstance = KindomOfDemon(name: &amp;quot;The Kindom of God&amp;quot;)
    var name: String
    var description: String { return self.name }
    private init(name: String){
        self.name = name
        storify(subject: self, content: &amp;quot;created&amp;quot;)
    }
}
final class KindomOfFairy:Kindom {
    static let sharedInstance = KindomOfFairy(name: &amp;quot;The Kindom of Fairy&amp;quot;)
    var name: String
    var description: String { return self.name }
    private init(name: String){
        self.name = name
        storify(subject: self, content: &amp;quot;created&amp;quot;)
    }
}
final class KindomOfHell:Kindom {
    static let sharedInstance = KindomOfHell(name: &amp;quot;The Kindom of Hell&amp;quot;)
    var name: String
    var description: String { return self.name }
    private init(name: String){
        self.name = name
        storify(subject: self, content: &amp;quot;created&amp;quot;)
    }
}
final class KindomOfMonster:Kindom {
    static let sharedInstance = KindomOfMonster(name: &amp;quot;The Kindom of Monster&amp;quot;)
    var name: String
    var description: String { return self.name }
    private init(name: String){
        self.name = name
        storify(subject: self, content: &amp;quot;created&amp;quot;)
    }
}
final class KindomOfHuman:Kindom {
    static let sharedInstance = KindomOfHuman(name: &amp;quot;The Kindom of Human&amp;quot;)
    var name: String
    var description: String { return self.name }
    private init(name: String){
        self.name = name
        storify(subject: self, content: &amp;quot;created&amp;quot;)
    }
}

//: Testing
KindomOfGod.sharedInstance
KindomOfFairy.sharedInstance
KindomOfMonster.sharedInstance
KindomOfHell.sharedInstance
KindomOfDemon.sharedInstance
KindomOfHuman.sharedInstance

StoryPen.sharedInstance.showStoryBook()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/Singleton.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-988&quot; src=&quot;/assets/wp-content/uploads/2015/07/Singleton.png&quot; alt=&quot;Singleton&quot; width=&quot;543&quot; height=&quot;119&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;p class=&quot;p1&quot;&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift  &#8211; Chapter 4:  Factory</title>
   <link href="localhost:4000/2015/07/01/a-design-pattern-story-in-swift-chapter-4-factory/"/>
   <updated>2015-07-01T00:00:00-07:00</updated>
   <id>localhost:4000/2015/07/01/a-design-pattern-story-in-swift-chapter-4-factory</id>
   <content type="html">&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;We all have our special weapons. And we fight for what we believed in. &lt;/span&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;enum PersonType{
    case God
    case Knight
    case Wizard
    case Dwarf
    case Poet
}

protocol Personable {
    var personType: PersonType { get }
    var name: String { get }
    var weapon: Weapon? { get set}
}

class Person: Personable, CustomStringConvertible {
    var personType: PersonType
    var name: String
    var weapon: Weapon?
    var description: String {
        return name + (weapon == nil ? &amp;quot; - no weapon \n&amp;quot; : &amp;quot; - Weapon: \(weapon!.name) (price: \(weapon!.price)#) \n&amp;quot;)
    }
    
    init(personType: PersonType,name: String, weapon: Weapon?){
        self.name = name
        self.personType = personType
        self.weapon = weapon
    }
}
//: HouseOfWeapon is a new family that has rised since the first war in the seven kindom. They are the only place where people can get their weapons.
protocol Weapon {
    var name: String { get }
    var price: Int { get set }
    func fight()
}

struct Sword: Weapon {
    var name: String
    var price: Int
    func fight() {
        print(&amp;quot;fight with sword&amp;quot;)
    }
}
struct Pen: Weapon {
    var name: String
    var price: Int
    func fight() {
        print(&amp;quot;fight with pen&amp;quot;)
    }
}
struct Magic: Weapon {
    var name: String
    var price: Int
    func fight() {
        print(&amp;quot;fight with magic&amp;quot;)
    }
}
struct Hammer: Weapon {
    var name: String
    var price: Int
    func fight() {
        print(&amp;quot;fight with hammer&amp;quot;)
    }
}

//: In the beginning, people would randomly drop at the HouseOfWeapon and ask for their weapon of choice. The choices sometimes turn out to be terribly wrong and people would come back to demand for exchanges. There is no system

//: LordOfWeapon is the head of HouseOfWeapon and he has the knowledge of what kind of weapon should be create for what kind of person.
class LordOfWeapon {
    class func weaponMatch(person: Person) -&amp;amp;gt; Weapon {
        switch person.personType {
        case .Dwarf: return Hammer(name: &amp;quot;Hammer&amp;quot;, price: 10)
        case .God, .Wizard: return Magic(name: &amp;quot;Magic&amp;quot;, price: 20)
        case .Knight: return Sword(name: &amp;quot;Sword&amp;quot;, price: 15)
        case .Poet: return Pen(name: &amp;quot;Pen&amp;quot;, price: 25)
        }
    }
}

//: create a group of people
let knight = Person(personType: PersonType.Knight, name: &amp;quot;Knight William&amp;quot;, weapon: nil)
let dwarf = Person(personType: PersonType.Dwarf, name: &amp;quot;Dwarf Jim&amp;quot;, weapon: nil)
let poet = Person(personType: PersonType.Poet, name: &amp;quot;Poet Shelly&amp;quot;, weapon: nil)
let god = Person(personType: PersonType.God, name: &amp;quot;God of Music&amp;quot;, weapon: nil)
var group:[Person] = [knight, dwarf, poet, god]

print(&amp;quot;----------People Group Created---------&amp;quot;)
print(group.map{$0.description})

group = group.map({ (var p) -&amp;amp;gt; Person in
    p.weapon = LordOfWeapon.weaponMatch(p)
    return p
})
print(&amp;quot;----------Weapon Added---------&amp;quot;)
print(group.map{$0.description})

//:## Now, the new LordOfCoin want to reset the price of the weapons

class LordOfCoin {
    class func adjustWeaponPrice( person: Person) -&amp;amp;gt; Int  {
        guard person.weapon != nil else { return 0 }
        switch person.personType {
        case .Dwarf: return 1
        case .God,; .Wizard: return  50
        case; .Knight: return 5
        case; .Poet: return  -20
        }
    }
}

print(&amp;quot;\n----------LordOfCoin adjusted the price of weapons ---------&amp;quot;)
group = group.map({ (var p) -&amp;amp;gt; Person in
    p.weapon?.price += LordOfCoin.adjustWeaponPrice(p)
    return p
})
print(group.map{$0.description})


//: The problem is that both LordOfCoin and LordOfWeapon are doing the same kind of checking for person&amp;#39;s type. Can they outsource this work to someone else? Perhaps a RuleBook? Say a universalWeaponMatch rule
func universalWeaponMatch(var person: Personable) -&amp;amp;gt; Personable {
    if person.weapon == nil {
        var weapon: Weapon
        switch person.personType {
        case .Dwarf: weapon =  Hammer(name: &amp;quot;Hammer&amp;quot;, price: 10)
        case .God, .Wizard: weapon = Magic(name: &amp;quot;Magic&amp;quot;, price: 20)
        case .Knight: weapon = Sword(name: &amp;quot;Sword&amp;quot;, price: 15)
        case .Poet: weapon = Pen(name: &amp;quot;Pen&amp;quot;, price: 25)
            
        }
        person.weapon = weapon
    }
    return person
}

//: The LordOfWeapon refers the &amp;#39;universalWeaponMatch&amp;#39; to create the right weapon for each person
class LordOfWeaponAdvanced {
    class func weaponMatch(person: Personable) -&amp;amp;gt; Weapon? {
        return universalWeaponMatch(person).weapon
    }
}

//: CoinOfWeapon refers the &amp;#39;universalWeaponMatch&amp;#39; to check and adjust the weapon price.
class LordOfCoinAdvanced {
    class func getWeaponPrice(person: Personable) -&amp;amp;gt; Int? {
        return universalWeaponMatch(person).weapon?.price
    }
    class func adjustWeaponPrice(var person: Personable) -&amp;amp;gt; Personable {
        //: equip the person with weapon
        person = universalWeaponMatch(person)
        guard person.weapon != nil else { return person }
        // Fav Poet and give them free weapons
        if person.weapon!.price &amp;amp;gt; 0 &amp;amp;&amp;amp; person.personType == .Poet {
            print(&amp;quot;Through the &amp;#39;universalWeaponMatch&amp;#39; book, LordOfCoinAdvanced adjusted the weapon price for \(person.name) from \(person.weapon!.price)# to 0# &amp;quot;)
            person.weapon!.price = 0
        }
        return person
    }
}

print(&amp;quot;\n---------- &amp;#39;universalWeaponMatch&amp;#39; book is created ---------&amp;quot;)
LordOfCoinAdvanced.adjustWeaponPrice(group[2])
print(group[2] )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/factory-1.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-981&quot; src=&quot;/assets/wp-content/uploads/2015/07/factory-1.png&quot; alt=&quot;factory 1&quot; width=&quot;797&quot; height=&quot;355&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rework on the code, add weapon factories and let them decide the weapon details.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;enum PersonType{
    case God
    case Knight
    case Wizard
    case Dwarf
    case Poet
}

enum WeaponType {
    case Sword
    case Magic
    case Pen
    case Hammer
}


//: We all have our special weapons. And we fight for what we believed in.
protocol Personable {
    var personType: PersonType { get }
    var name: String { get }
    var weapon: Weapon? { get set}
    var skillLevel: Int { get set}
}

class Person: Personable, CustomStringConvertible {
    var personType: PersonType
    var name: String
    var weapon: Weapon?
    var skillLevel: Int
    var description: String {
        return name + (weapon == nil ? &amp;quot; - no weapon \n&amp;quot; : &amp;quot; - Weapon: \(weapon!.name) (price: \(weapon!.price)#) \n&amp;quot;)
    }
    init(personType: PersonType,name: String, weapon: Weapon?, skillLevel: Int  = 0){
        self.name = name
        self.personType = personType
        self.weapon = weapon
        self.skillLevel = skillLevel
    }
}


protocol Weapon {
    var name: String { get }
    var price: Int { get set }
    var powerLevel: Int { get }
    
    func fight()
}
struct Sword: Weapon {
    var name: String
    var price: Int
    var powerLevel: Int
    func fight() {
        print(&amp;quot;fight with sword&amp;quot;)
    }
}
struct Pen: Weapon {
    var name: String
    var price: Int
    var powerLevel: Int
    func fight() {
        print(&amp;quot;fight with pen&amp;quot;)
    }
}
struct Magic: Weapon {
    var name: String
    var price: Int
    var powerLevel: Int
    func fight() {
        print(&amp;quot;fight with magic&amp;quot;)
    }
}
struct Hammer: Weapon {
    var name: String
    var price: Int
    var powerLevel: Int
    func fight() {
        print(&amp;quot;fight with hammer&amp;quot;)
    }
}


//: Previously the &amp;quot;universalWeaponMatch&amp;quot; takes over the responsibility for creating the matching weapon for each person. But as the amount of weapon grows, the matching book exploded and became hard to manage.
//: In general, the HouseOfWeapon makes 3 kinds weapons:
//: * WeaponFromTheSouth: good for entry level, flexbile
//: * WeaponFromTheNorth: requires heavy mastery, very powerful
//: * WeaponFromTheVast: a mix of materials from everywhere, can be very weak or very powerful. Hard to expect the result

protocol WeaponFactory {
    func makeAWeapon(weaponType: WeaponType) -&amp;amp;gt; Weapon
}

class WeaponFactoryFromTheNorth:WeaponFactory {
     func makeAWeapon(weaponType: WeaponType) -&amp;amp;gt; Weapon {
        switch weaponType {
        case .Hammer: return Hammer(name: &amp;quot;Hammer from North&amp;quot;, price: 100, powerLevel: 90)
        case .Magic: return Magic(name: &amp;quot;Magic from North&amp;quot;, price: 100, powerLevel: 80)
        case .Pen: return Pen(name: &amp;quot;Pen from North&amp;quot;, price: 90, powerLevel: 99)
        case .Sword: return Sword(name: &amp;quot;Sword from North&amp;quot;, price: 70, powerLevel: 65)
        }
    }
}

class WeaponFactoryFromTheSouth:WeaponFactory {
    func makeAWeapon(weaponType: WeaponType) -&amp;amp;gt; Weapon {
        switch weaponType {
        case .Hammer: return Hammer(name: &amp;quot;Hammer from South&amp;quot;, price: 100, powerLevel: 1)
        case .Magic: return Magic(name: &amp;quot;Magic from South&amp;quot;, price: 10, powerLevel: 18)
        case .Pen: return Pen(name: &amp;quot;Pen from South&amp;quot;, price: 9, powerLevel: 9)
        case .Sword: return Sword(name: &amp;quot;Sword from South&amp;quot;, price: 7, powerLevel: 5)
        }
    }
}
class WeaponFactoryFromTheVast:WeaponFactory {
    func makeAWeapon(weaponType: WeaponType) -&amp;amp;gt; Weapon {
        switch weaponType {
        case .Hammer: return Hammer(name: &amp;quot;Hammer from Vast&amp;quot;, price: 80, powerLevel: 99)
        case .Magic: return Magic(name: &amp;quot;Magic from Vast&amp;quot;, price: 30, powerLevel: 1)
        case .Pen: return Pen(name: &amp;quot;Pen from Vast&amp;quot;, price: 9, powerLevel: 67)
        case .Sword: return Sword(name: &amp;quot;Sword from Vast&amp;quot;, price: 78, powerLevel: 2)
        }
    }
}

//: the &amp;#39;universalWeaponMatchAdvanced&amp;#39; checks the person&amp;#39;s skill level first and send the order to one of the three Weapon Factories to make the weapon. It doesn&amp;#39;t need to care about the details of each weapon (price, name...). It&amp;#39;s not their business anyway.
func universalWeaponMatchAdvaned(var person: Personable) -&amp;amp;gt; Personable {
    var weaponFactory: WeaponFactory
    switch person.skillLevel {
        case 0...20: weaponFactory = WeaponFactoryFromTheSouth()
        case; 21...100: weaponFactory = WeaponFactoryFromTheNorth();
        default: weaponFactory = WeaponFactoryFromTheVast()
    }
    
    if person.weapon == nil {
        var weapon: Weapon
        switch person.personType {
        case .Dwarf: weapon =  weaponFactory.makeAWeapon(WeaponType.Hammer)
        case .God,; .Wizard: weapon = weaponFactory.makeAWeapon(WeaponType.Magic)
        case; .Knight: weapon = weaponFactory.makeAWeapon(WeaponType.Sword)
        case; .Poet: weapon = weaponFactory.makeAWeapon(WeaponType.Pen)
        }
        person.weapon = weapon
    }
    return person
}

class LordOfWeapon {
    class func weaponMatch(person: Personable) -&amp;amp;gt; Weapon? {
        return universalWeaponMatchAdvaned(person).weapon
    }
}

//: Testing
print(&amp;quot;----------Created a group of people ---------&amp;quot;)
let knight = Person(personType: PersonType.Knight, name: &amp;quot;Knight William&amp;quot;, weapon: nil, skillLevel: 56)
let dwarf = Person(personType: PersonType.Dwarf, name: &amp;quot;Dwarf Jim&amp;quot;, weapon: nil, skillLevel: 99)
let poet = Person(personType: PersonType.Poet, name: &amp;quot;Poet Shelly&amp;quot;, weapon: nil, skillLevel: 142)
let god = Person(personType: PersonType.God, name: &amp;quot;God of Music&amp;quot;, weapon: nil, skillLevel: 1)
var group:[Person] = [knight, dwarf, poet, god]

print(group.map{$0.description})
print(&amp;quot;----------Add Weapon to each person according to their skill level ---------&amp;quot;)
group.map{LordOfWeapon.weaponMatch($0)}
print(group.map{$0.description})


//:## Now, the new LordOfCoin want to reset the price of the weapons. He is also responsible for calculating the tax for each person&amp;#39;s weapon

class LordOfCoin {
    class func calculateWeaponCostAfterTax(person: Personable) -&amp;amp;gt; Int {
        if person.weapon == nil { return 0 }
        else { return universalWeaponMatchAdvaned(person).weapon!.price * 2 }
    }
    class func adjustWeaponPrice( person: Person) -&amp;amp;gt; Int  {
        guard person.weapon != nil else { return 0 }
        switch person.personType {
        case .Dwarf: return 1
        case .God, .Wizard: return  50
        case .Knight: return 5
        case .Poet: return  20
        }
    }
}

print(&amp;quot;\n----------LordOfCoin adjusted the price of weapons ---------&amp;quot;)
group = group.map({ (var p) -&amp;amp;gt; Person in
    p.weapon?.price += LordOfCoin.adjustWeaponPrice(p)
    return p
})
print(group.map{$0.description})
print(&amp;quot;\n----------LordOfCoin calculate the total cost after tax ---------&amp;quot;)
let totalCost = group.map{LordOfCoin.calculateWeaponCostAfterTax($0)}.reduce(0, combine: +)
let totalCostBeforeTax = group.map{$0.weapon!.price}.reduce(0, combine: +)
print(&amp;quot;total cost after tax: \(totalCost)#  (before tax: \(totalCostBeforeTax)#)\n&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/07/factory-2.png&amp;#x27;&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-982&quot; src=&quot;/assets/wp-content/uploads/2015/07/factory-2.png&quot; alt=&quot;factory 2&quot; width=&quot;530&quot; height=&quot;358&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;p class=&quot;p1&quot;&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift  &#8211; Chapter 3: Decorator</title>
   <link href="localhost:4000/2015/06/30/a-design-pattern-in-swift-chapter-3-decorator/"/>
   <updated>2015-06-30T00:00:00-07:00</updated>
   <id>localhost:4000/2015/06/30/a-design-pattern-in-swift-chapter-3-decorator</id>
   <content type="html">&lt;p&gt;There is a powerful sorcerer in town. He sells magic potions and only charges them for blue diamonds. Blue diamond is a special kind of currency in the magic world and people are born with certain amount of that. The sorcerer would give old customers or his favorite customers different discounts.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;class MagicSale {
    let name: String
    let price: Int
    var totalPrice: Int { return price }
    var description: String { return name }
    init(name: String, price: Int) {
        self.name = name
        self.price = price
    }
    
}

//: Sale for all kinds of magic accessories
class MagicDecoratorSale: MagicSale {
    private let wrapperMagicSale: MagicSale
    init(magicSale: MagicSale){
        wrapperMagicSale = magicSale
        super.init(name: magicSale.description, price: magicSale.totalPrice)
    }
}

//: Discounts
class DiscountDecoratorSale: MagicSale {
    private let wrapperMagicSale: MagicSale
    var discountAmount: Int { return 0 }
    init(magicSale: MagicSale, totalDiscountAmount: Int = 0 ){
        wrapperMagicSale = magicSale
        super.init(name: magicSale.description, price: magicSale.totalPrice)
    }
    
    func totalDiscounts() -&amp;amp;gt; Int {
        var total = 1
        guard let discounter = wrapperMagicSale as? DiscountDecoratorSale else {
             return total
        }
        total += discounter.totalDiscounts()
        return total
    }
}

//: For added power options
class PowerDecoratorSale: MagicSale {
    private let wrapperMagicSale: MagicSale
    private let powerOptions: [PowerOption]
    enum PowerOption {
        case Fly
        case Teleport
        case Invisible
    }
    init(magicSale: MagicSale, powerOptions: PowerOption... ){
        wrapperMagicSale = magicSale
        self.powerOptions = powerOptions
        super.init(name: magicSale.description, price: magicSale.totalPrice)
    }
    override var description: String {
        var des = super.description
        for option in powerOptions {
            switch option {
            case .Fly: des += &amp;quot; Flying Power  &amp;quot;
            case .Invisible: des += &amp;quot; Invisible Power&amp;quot;
            case .Teleport: des += &amp;quot; Teleport Power&amp;quot;
            }
        }
        return des
    }
    override var totalPrice: Int {
        var pri = wrapperMagicSale.totalPrice
        for option in powerOptions {
            switch option {
            case .Fly: pri += 2
            case .Invisible: pri += 3
            case .Teleport: pri += 4
            }
        }
        return pri
    }
    
}

//: Discount for favorite customers
class CustomerFavDiscountSale: DiscountDecoratorSale {
    override var totalPrice: Int { return super.totalPrice - discountAmount }
    override var discountAmount: Int { return 2 }
    override var description: String {return &amp;quot;\(super.description) // Fav Discount&amp;quot;}
}
//: Discount for important customers
class CustomerPriorityDiscountSale: DiscountDecoratorSale {
    override var totalPrice: Int { return super.totalPrice - discountAmount }
    override var discountAmount: Int { return 1 }
    override var description: String {return &amp;quot;\(super.description) // Priorty Discount&amp;quot;}
}


//: Add Sprite as the magic accessory
class MagicSaleWithSprite: MagicDecoratorSale {
    override var description: String { return &amp;quot;\(super.description) + Sprite&amp;quot; }
    override var totalPrice: Int { return super.totalPrice + 2 }
}
//: Add MagicStarterKit as the magic accessory
class MagicSaleWithMagicStarterKit: MagicDecoratorSale {
    override var description: String { return &amp;quot;\(super.description) + MagicStarterKit&amp;quot; }
    override var totalPrice: Int { return super.totalPrice + 1 }
}


//: keep track of the purchases of a customer
class MagicPurchase: CustomStringConvertible {
    let name: String
    var magicPurchases: [MagicSale] = []
    init(name: String){
        self.name = name
    }
    func addPurchase(magicSale: MagicSale) {
        self.magicPurchases.append(magicSale)
        print(&amp;quot;\(magicSale.description) added: \(magicSale.totalPrice)# [\(magicSale.name): \(magicSale.price)#] &amp;quot;)
    }
    
    var description: String {
        return &amp;quot;\(name)&amp;#39;s Magic Purchases:\(magicPurchases)&amp;quot;
    }
    func printReceipt(){
        print(&amp;quot;\n  Receipt: \n\(name)&amp;#39;s Magic Purchases:&amp;quot;)
   
        var totalDiscountTimes = 0
        let totalPriceFinal =  magicPurchases.map{
            print( &amp;quot;\($0.description) : \($0.totalPrice) #&amp;quot; )
            if let d1 =  $0 as? DiscountDecoratorSale {
                totalDiscountTimes += d1.totalDiscounts()
            }
            return $0.totalPrice
        }.reduce(0, combine: +)

        print(&amp;quot;Total Price after discount: \(totalPriceFinal ) # &amp;quot;)
        print(&amp;quot;\(totalDiscountTimes) discounts in total\n&amp;quot;)
    }
}

//: Test
let loveWithSprite = MagicSaleWithSprite(magicSale: MagicSale(name: &amp;quot;Love Potion&amp;quot;, price: 5))
let randomFavDiscountForSleep =  CustomerFavDiscountSale(magicSale: MagicSale(name: &amp;quot;Sleep Potion&amp;quot;, price: 3))
let disguise = MagicSale(name: &amp;quot;Disguise Potion&amp;quot;, price: 10)

let ariaPurchase = MagicPurchase(name: &amp;quot;Aria&amp;quot;)
ariaPurchase.addPurchase(loveWithSprite)
ariaPurchase.addPurchase(randomFavDiscountForSleep)
ariaPurchase.addPurchase(disguise)
ariaPurchase.printReceipt()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/06/Decorator.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-970&quot; src=&quot;/assets/wp-content/uploads/2015/06/Decorator.png&quot; alt=&quot;Decorator&quot; width=&quot;457&quot; height=&quot;201&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Strategy Design Pattern Updated Using Protocol Extension in Swift 2.0</title>
   <link href="localhost:4000/2015/06/29/strategy-design-pattern-updated-using-protocol-extension-in-swift-2-0/"/>
   <updated>2015-06-29T00:00:00-07:00</updated>
   <id>localhost:4000/2015/06/29/strategy-design-pattern-updated-using-protocol-extension-in-swift-2-0</id>
   <content type="html">&lt;p&gt;I came across the Protocol-Oriented programming concept recently and I found it quite fascinating, so I decided to rewrite my previous story with protocols and value-based approaches.&lt;/p&gt;

&lt;p&gt;The first thing I need to do is layout all the requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I want to model all the creatures in the world including animals and plants.&lt;/li&gt;
&lt;li&gt;Basically all creatures have names. The difference between animals and plants is whether they can move, generally speaking.&lt;/li&gt;
&lt;li&gt;All the moving animals have their own &amp;#8216;Escape Strategy&amp;#8217;. But how do they execute their strategies varies.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;//: Create the base protocol &amp;#39;Creature&amp;#39;
public protocol Creature: CustomStringConvertible {
    static var entityName: String { get }
    var name: String { get }
    var canMove: Bool { get }
}

//: Protocol &amp;#39;Animal&amp;#39; inherit from &amp;#39;Creature&amp;#39; protocol and it has a &amp;#39;escapeStrategy&amp;#39;, can &amp;#39;performEscape&amp;#39;
public protocol Animal: Creature {
    var escapeStrategy: EscapeStrategy { get }
    func performEscape()
}
//: &amp;#39;Plant&amp;#39; also conforms to &amp;#39;Creature&amp;#39; protocol
public protocol Plant: Creature {
}

//: It&amp;#39;s a wonder that we can actually extend a protocol and have it carry out the default implementation of other protocols. This case, all animals can &amp;#39;performEscape&amp;#39;
extension Animal {
    public func performEscape(){
        print(&amp;quot;\(name) about to execute a Escape Plan&amp;quot;)
        escapeStrategy.executeEscapePlan()
        print(&amp;quot;\(name) successfully escaped&amp;quot;)
    }
}

//: Here is the key. All animals have &amp;#39;EscapeStrategy&amp;#39;, but how they implement will be different. Have a protocol enables the runtime execution to be different
public protocol EscapeStrategy {
    func executeEscapePlan()
}

public class EscapeByFlying: EscapeStrategy {
    public func executeEscapePlan() {
        print(&amp;quot;Escape by flying&amp;quot;)
    }
     public init() {}
}

public class EscapeByRunning: EscapeStrategy {
   public func executeEscapePlan() {
        print(&amp;quot;Escape by running&amp;quot;)
    }
    public init() {}
}
public class EscapeByOther: EscapeStrategy {
   public func executeEscapePlan() {
        print(&amp;quot;Mysteriously escape&amp;quot;)
    }
     public init() {}
}

//: All animals can move
extension Moveable where Self: Animal {
    public var canMove: Bool { return true }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;The next step is to write some concrete struct / class to actually conform to the protocols. The power of protocol inheritance and composition makes it quite easy and flexible to do so.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;//: Cat
public struct Cat: Animal, Moveable {
    public static var entityName: String { return &amp;quot;Cat&amp;quot; }
    public var name: String
    
    public static func randomMove() { print(&amp;quot;I am moving randomly&amp;quot;) }
    public var movingSpeed = 12.1
    
    public var escapeStrategy: EscapeStrategy
    
    public init(name: String, movingSpeed: Double, escapeStrategy: EscapeStrategy){
        self.name = name
        self.movingSpeed = movingSpeed
        self.escapeStrategy = escapeStrategy
    }
    
}
//:Rose
public struct Rose: Plant {
    public static var entityName: String { return &amp;quot;Rose&amp;quot; }
    public var name: String
    public var canMove: Bool { return false }
    
    public init(name: String){
        self.name = name
    }
}


public protocol Aged {
    var age: Int { get }
}

public protocol FullyNamed {
    var fullName: String { get }
}
//: &amp;#39;Person&amp;#39; also confirms to &amp;#39;Animal&amp;#39; protocol 
public struct Person: Animal, FullyNamed, Moveable, Aged {
    public static var entityName: String { return &amp;quot;Person&amp;quot; }
    public var name: String
    
    public var fullName: String
    
    public static func randomMove() { print(&amp;quot;I am moving randomly&amp;quot;) }
    public var movingSpeed = 15.1
    
    public var age: Int { return 20 }
    
    public var escapeStrategy: EscapeStrategy
    
    public init(name: String, fullName:String,  movingSpeed: Double, escapeStrategy: EscapeStrategy){
        self.name = name
        self.fullName = fullName
        self.movingSpeed = movingSpeed
        self.escapeStrategy = escapeStrategy
    }
}

//: protocol composition 
public func showCreatureAge(creature: protocol &amp;amp;lt;Creature, Aged&amp;amp;gt;) {
    print(&amp;quot;\(creature.name) is \(creature.age) years\&amp;#39; old&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally test the code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;var rose = Rose(name: &amp;quot;Pretty Rose Flower&amp;quot;)
var person = Person(name: &amp;quot;Mia&amp;quot;, fullName: &amp;quot;Mia Zhu&amp;quot;, movingSpeed: 2121, escapeStrategy: EscapeByFlying() )
var cat = Cat(name: &amp;quot;Kitty&amp;quot;, movingSpeed: 10, escapeStrategy: EscapeByRunning())

var creatures:[Creature] = [cat, rose, person]
creatures.filter { $0 is Animal}.map{ ($0 as! Animal).performEscape()}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/06/Strategy-Pattern-in-Swift-2.0.png&quot;&gt;&lt;img class=&quot; size-full wp-image-957 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/06/Strategy-Pattern-in-Swift-2.0.png&quot; alt=&quot;Strategy Pattern in Swift 2.0&quot; width=&quot;305&quot; height=&quot;119&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift &#8211; Chapter 2: Observer</title>
   <link href="localhost:4000/2015/06/29/a-design-pattern-story-in-swift-chapter-two-observer/"/>
   <updated>2015-06-29T00:00:00-07:00</updated>
   <id>localhost:4000/2015/06/29/a-design-pattern-story-in-swift-chapter-two-observer</id>
   <content type="html">&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;In the deep forest, there is a beautiful witch who was born with the power to tell the past and future. In the beginning she was just a little girl in a nearby village. She knows everyone and whenever she sees danger in the future, she would warn the person. But soon she realized there are simply too many people to warn, and some of which don&amp;#8217;t even want any help.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;So she told the good people of the village that if they want to know her update, they can tune in to listen to her music station and they shall know the message from the music.&lt;/span&gt;
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;//: Define the message  for the all parties
enum WitchMessageType: String {
    case IsChrystalBadLuck = &amp;quot;Bad_Luck&amp;quot;
    case IsChrystalGoodLuck = &amp;quot;Good_Luck&amp;quot;
    case StationCreated = &amp;quot;Station_Created&amp;quot;
    case StationDestroyed = &amp;quot;Station_Destroyed&amp;quot;
}
class WitchMessage {
    let type: WitchMessageType
    let data: Any?
    init(type: WitchMessageType, data: Any?) {
        self.type = type
        self.data = data
    }
}


//: the Good Witch will tell everybody the name of the person she tells fortune for. Bad witch may not.
class GoodWitchMessage: WitchMessage {
    var name: String
    var isBadLuck: Bool { return self.type == WitchMessageType.IsChrystalBadLuck }
    
    init(name: String, type: WitchMessageType, data: Any?){
        self.name = name
        super.init(type: type, data: data)
    }
}

// People who listen to her music station are observers
protocol Observer {
    var name:String { get }
    func notify(witchMessage: WitchMessage)
}


extension CustomStringConvertible where Self: Observer {
    var description: String { return self.name }
}


protocol Station {
    func addObserver(observers: Observer...)
    func removerObserver(observer: Observer)
}


class BaseStation: Station, CustomStringConvertible {
    private var observers: [Observer] = []
    var description: String { return &amp;quot;I am a Station and my observers are: \(observers)&amp;quot; }
    private var orderedQueue = dispatch_queue_create(&amp;quot;orQ&amp;quot;, DISPATCH_QUEUE_CONCURRENT)
    
    //: She can only add or remove one person at a time
    func addObserver(observers: Observer...) {
        dispatch_barrier_sync(orderedQueue) {
            observers.map { self.observers.append($0) }
        }
    }
    
    
    func removerObserver(observer: Observer) {
        dispatch_barrier_sync(orderedQueue) { () -&amp;amp;gt; Void in
            self.observers.filter{ $0.name == observer.name}
            print(&amp;quot;removed observer \(observer.name)&amp;quot;)
        }
    }
    func sendNotificationToAll(witchMessage: WitchMessage) {
        dispatch_sync(orderedQueue) { () -&amp;amp;gt; Void in
            self.observers.map{ $0.notify(witchMessage) }
        }
    }
}

class WitchStation: BaseStation {
    
    func checkCrystalBall(name: String) -&amp;amp;gt; Bool {
        var messageType = WitchMessageType.IsChrystalGoodLuck
        
        if RandomYesOrNoGeneratorByInt.random() {
            print(&amp;quot;Witch Tell: Good luck ahead&amp;quot;)
        } else {
            messageType = WitchMessageType.IsChrystalBadLuck
            print(&amp;quot;Witch Tell: Bad luck ahead&amp;quot;)
        }
        
        sendNotificationToAll(GoodWitchMessage(name: name, type: messageType, data: nil))
        return messageType == WitchMessageType.IsChrystalGoodLuck
    }
}

//: all that listen to her messages
class Villager: Observer {
    var name: String
    init(name: String){
        self.name = name
    }
    func notify(witchMessage: WitchMessage) {
        print(&amp;quot;Villager \(name) got notified&amp;quot;)
        guard let message = witchMessage as? GoodWitchMessage else {
            print(&amp;quot;This message might come from the Bad Witch&amp;quot;)
            return
        }
        print(&amp;quot;Message for \(message.name). Is Bad Luck? \(witchMessage.type)&amp;quot;)
    }
    
    func logMyFortune(fortune: String) {
        print(&amp;quot;Log: \(fortune)&amp;quot;)
    }
}

class AlarmSystem: Observer {
    var name: String
    init(name: String){
        self.name = name
    }
    func notify(witchMessage: WitchMessage) {
        print(&amp;quot;\(name) got notified&amp;quot;)
        guard let message = witchMessage as? GoodWitchMessage else {
            print(&amp;quot;This message might come from the Bad Witch&amp;quot;)
            return
        }
        if witchMessage.type == WitchMessageType.IsChrystalBadLuck  {
            print(&amp;quot;Something unfortunate will happen to \(message.name). An alarm is being sent out&amp;quot;)
        }
    }
}

class Hero: Observer {
    var name: String
    init(name: String){
        self.name = name
    }
    func notify(witchMessage: WitchMessage) {
        print(&amp;quot;Hero got notified&amp;quot;)
        if witchMessage.type == WitchMessageType.IsChrystalBadLuck {
            saveTheUnfortunate()
        }
    }
    func saveTheUnfortunate() {
        print(&amp;quot;A hero will come to save you&amp;quot;)
    }
}

//: Test the system
let jane = Villager(name: &amp;quot;Jane&amp;quot;)
let alarm = AlarmSystem(name: &amp;quot;Alarm System&amp;quot;)
let jack = Hero(name: &amp;quot;Hero Jack&amp;quot;)

let witchStation = WitchStation()
witchStation.addObserver(jane, alarm, jack)
print(witchStation.description)
print(&amp;quot;--check luck for Nicole ---&amp;quot;)
witchStation.checkCrystalBall(&amp;quot;Nicole&amp;quot;)

print(&amp;quot;---check luck for Mia --&amp;quot;)
witchStation.checkCrystalBall(&amp;quot;Mia&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/06/Observer-Pattern.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-962&quot; src=&quot;/assets/wp-content/uploads/2015/06/Observer-Pattern.png&quot; alt=&quot;Observer Pattern&quot; width=&quot;489&quot; height=&quot;227&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hdwallpapers.cat/do_not_listen_to_him_forest_girl_fruit_hd-wallpaper-1852331/&quot;&gt;Image&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Design Pattern Story in Swift- Chapter 1: Strategy</title>
   <link href="localhost:4000/2015/06/09/a-design-pattern-story-chapter-1-strategy/"/>
   <updated>2015-06-09T00:00:00-07:00</updated>
   <id>localhost:4000/2015/06/09/a-design-pattern-story-chapter-one-strategy</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;Happy families are all alike; every unhappy family is unhappy in its own way. &amp;#8211; Leo Tolstoy&amp;#8217;s&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once upon a time, there was a girl living happily in the deep forrest. She did not know where she came, nor where she is suppose to be. The only unfamiliar memory she had is that many years ago, before she could wake up from the cold and molded stone, she heard a distance whisper, saying “home, home, this is your home”.&lt;/p&gt;

&lt;p&gt;She was terrified of the world when she woke up. Everything is so strange, so unspeakably complicated. And worst of all, there was even no language in her head that can explain what she is going through.&lt;/p&gt;

&lt;p&gt;She stood up and started to walk, then she noticed something different which helped her understand the world a little better: a lot of moving creatures were afraid of her!&lt;/p&gt;

&lt;p&gt;Rabbits jumped away.&lt;br&gt;
Birds flied away.&lt;br&gt;
Squirrels climbed up the trees.&lt;br&gt;
Hedgehog put their heads under the shells…&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;class Creature {
    let name:String
    var escapeStrategy: EscapeStrategy
    init(name: String, escapeStrategy: EscapeStrategy){
        self.name = name
        self.escapeStrategy = escapeStrategy
    }
    func performEscape() {
        escapeStrategy.executeEscapePlan()
        println(&amp;quot;\(name) successfully escaped&amp;quot;)
    }
}


protocol EscapeStrategy {
    func executeEscapePlan()
}

class EscapeByFlying: EscapeStrategy {
    func executeEscapePlan() {
        println(&amp;quot;I escaped by flying&amp;quot;)
    }
}
class EscapeByJumping: EscapeStrategy {
    func executeEscapePlan() {
        println(&amp;quot;I escaped by jumping&amp;quot;)
    }
}
class EscapeByClimbing: EscapeStrategy {
    func executeEscapePlan() {
        println(&amp;quot;I escaped by climbing&amp;quot;)
    }
}

class Rabbit: Creature {
    init(name: String) {
        super.init(name: name, escapeStrategy: EscapeByJumping())
    }
}

class Squirrel: Creature {
    init(name: String) {
        super.init(name: name, escapeStrategy: EscapeByClimbing())
    }
}
// don&amp;#39;t know the name of the bird yet
class Bird: Creature {
    init(name: String) {
        super.init(name: name, escapeStrategy: EscapeByFlying())
    }
}

// Testing Code 
let rabbit = Rabbit(name: &amp;quot;Miss Rabbit　Ｒ&amp;quot;)
let squirrel = Squirrel(name: &amp;quot;Mr. Squirrel S&amp;quot;)
let bird = Bird(name: &amp;quot;Madam. Bird B&amp;quot;)
rabbit.performEscape()
squirrel.performEscape()
bird.performEscape()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/06/Screen-Shot-2015-06-09-at-8.39.59-PM.png&quot;&gt;&lt;img class=&quot; size-full wp-image-885 alignnone&quot; src=&quot;/assets/wp-content/uploads/2015/06/Screen-Shot-2015-06-09-at-8.39.59-PM.png&quot; alt=&quot;Screen Shot 2015-06-09 at 8.39.59 PM&quot; width=&quot;291&quot; height=&quot;102&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“Ha, I have the power to expel creatures!” She felt a current of great excitement going through her body and she continued walking.&lt;/p&gt;

&lt;p&gt;Animals spoke in the background, &amp;#8220;yes, we all escape. You got it. But we do it differently.&amp;#8221;&lt;/p&gt;

&lt;p&gt;P.S.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Strategy Pattern defines a family of algorithms, encapsulates each one and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it. &amp;#8212; HeadFirst&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Notes for WWDC 2015 Keynote</title>
   <link href="localhost:4000/2015/06/08/notes-for-wwdc-2015-keynote/"/>
   <updated>2015-06-08T00:00:00-07:00</updated>
   <id>localhost:4000/2015/06/08/notes-for-wwdc-2015-keynote</id>
   <content type="html">&lt;p&gt;&lt;strong&gt; Intelligence&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proactive assistance&lt;/li&gt;
&lt;li&gt;API for search, deep link to application, convenient “back link&amp;#8221;&lt;/li&gt;
&lt;li&gt;Siri, remind of this today at Message&lt;/li&gt;
&lt;li&gt;All done on device and stay on device, and anonymous&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Apple Pay&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Going to UK&lt;/li&gt;
&lt;li&gt;Add Store cards&lt;/li&gt;
&lt;li&gt;Rewards and loyalty cards , automatically bring the right cards&lt;/li&gt;
&lt;li&gt;Rename Passcode to Wallet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Likely will destroy Evernote&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Map&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Transit Map&lt;/li&gt;
&lt;li&gt;Multi-Modal routing&lt;/li&gt;
&lt;li&gt;Location nearby, tell whether support Apple Pay&lt;/li&gt;
&lt;li&gt;Work on Mac as well&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;News&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Personalized content&lt;/li&gt;
&lt;li&gt;Interactive&lt;/li&gt;
&lt;li&gt;(Killing a lot of reader apps)&lt;/li&gt;
&lt;li&gt;Add “swift” (or any other topic) to fav&lt;/li&gt;
&lt;li&gt;Photo mosaics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;iPad&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Trackpad&lt;/li&gt;
&lt;li&gt;Shortcuts for keyboard&lt;/li&gt;
&lt;li&gt;Multitasking&lt;/li&gt;
&lt;li&gt;Task switcher&lt;/li&gt;
&lt;li&gt;Slide Over, Split View, and Picture in Picture (Developer APIs available)&lt;/li&gt;
&lt;li&gt;Move&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Power &amp;amp; Performance &lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extend one hour more with system optimization&lt;/li&gt;
&lt;li&gt;Low power mode, extend 3 hours&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;DEV&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App thinning&lt;/li&gt;
&lt;li&gt;GameplayKit, Model I?O, ReplayKit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HealthKit&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;More data support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;** HomeKit**&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Access via iCloud&lt;br&gt;
More sensors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Car Play&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pull the cord, no cable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Swift&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Swift 2&lt;/li&gt;
&lt;li&gt;Whole module optimization&lt;/li&gt;
&lt;li&gt;Protocol extensions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open Source!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;watchOS&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Timepiece, photo face, photo album face, time-lapse face of multiple cities&lt;/li&gt;
&lt;li&gt;Complications, show flight info, sports info… Any info to customize&lt;/li&gt;
&lt;li&gt;Time Travel, show things that are coming up&lt;/li&gt;
&lt;li&gt;Night-Stand mode and alarm clock with snooze&lt;/li&gt;
&lt;li&gt;Communication&lt;/li&gt;
&lt;li&gt;Friends, select and add&lt;/li&gt;
&lt;li&gt;Digital Touch&lt;/li&gt;
&lt;li&gt;Fitness app to run natively&lt;/li&gt;
&lt;li&gt;Support wallet cards&lt;/li&gt;
&lt;li&gt;Transit&lt;/li&gt;
&lt;li&gt;Siri, enable HomeKit, show glances….&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Native&lt;/strong&gt; app: move the App logic to the Watch&lt;/li&gt;
&lt;li&gt;Wifi support&lt;/li&gt;
&lt;li&gt;Access microphone, play audio, play video&lt;/li&gt;
&lt;li&gt;Access to healthKit&lt;/li&gt;
&lt;li&gt;Access accelerometer&lt;/li&gt;
&lt;li&gt;Taptic engine&lt;/li&gt;
&lt;li&gt;Access to Digital Crown&lt;/li&gt;
&lt;li&gt;More features for notification&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;MUSIC&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A new app (like Google Play, but with artist updates (social), global radio station, and intelligent integration with Siri and a few more features)&lt;/li&gt;
&lt;li&gt;Radio station beats 1&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 28 &#8211; Hello Friend &#8211; A Simple Chat App with Parse</title>
   <link href="localhost:4000/2015/05/26/day-28-hello-friend-a-simple-chat-app-with-parse/"/>
   <updated>2015-05-26T00:00:00-07:00</updated>
   <id>localhost:4000/2015/05/26/day-28-hello-friend-a-simple-chat-app-with-parse</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: a simple chat app using Parse API. &lt;a href=&quot;https://github.com/vidaaudrey/028-Hello-Friend-Parse-Chat-App&quot;&gt;Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User register and login&lt;/li&gt;
&lt;li&gt;Send and receive messages&lt;/li&gt;
&lt;li&gt;Message push notification in Watch App&lt;/li&gt;
&lt;li&gt;Send pre-defined short messages to friends&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/05/snapshot4.gif&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-868&quot; src=&quot;/assets/wp-content/uploads/2015/05/snapshot4.gif&quot; alt=&quot;snapshot&quot; width=&quot;378&quot; height=&quot;691&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/05/snapshot11.gif&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-870&quot; src=&quot;/assets/wp-content/uploads/2015/05/snapshot11.gif&quot; alt=&quot;snapshot1&quot; width=&quot;316&quot; height=&quot;410&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 27 &#8211; Apple Watch App &#8211; Color Game</title>
   <link href="localhost:4000/2015/05/23/day-27-apple-watch-app-color-game/"/>
   <updated>2015-05-23T00:00:00-07:00</updated>
   <id>localhost:4000/2015/05/23/day-27-apple-watch-app-color-game</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;https://github.com/vidaaudrey/027-Apple-Watch-App-Color-Game/raw/master/_snapshot/snapshot1.gif&quot; alt=&quot;Swift Snapshot&quot; style=&quot;max-width:100%;&quot; /&gt;&lt;br&gt;
&lt;strong&gt;Description&lt;/strong&gt;: a color game made for Apple Watch.&lt;a href=&quot;https://github.com/vidaaudrey/027-Apple-Watch-App-Color-Game&quot;&gt; Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy to play color game, just choose the right matching colors and you&amp;#8217;ll get a score increase&lt;/li&gt;
&lt;li&gt;Use force touch to trigger the menu to stop game, check scores or set the playing time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;#8217;s a known problem that the watch app runs quite slowly. I tried to incorporate framework, but it just slows down the app a lot. And sometimes, it stops at the loading screen.&lt;/li&gt;
&lt;li&gt;I also tried to pay a &amp;#8220;Show Score&amp;#8221; button at the first screen, ironically half the time the app will stop at the loading screen. So I moved it to settings&lt;/li&gt;
&lt;li&gt;I realized that I had some spelling problem with the app, too much waiting for the loading screen to change, so I just let it go.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/05/screenshot.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-849&quot; src=&quot;/assets/wp-content/uploads/2015/05/screenshot.png&quot; alt=&quot;screenshot&quot; width=&quot;312&quot; height=&quot;415&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;attachment_862&quot; style=&quot;width: 322px&quot; class=&quot;wp-caption aligncenter&quot;&gt;
  &lt;a href=&quot;/assets/wp-content/uploads/2015/05/beautiful_loading_screen.png&quot;&gt;&lt;img class=&quot;wp-image-862 size-full&quot; title=&quot;Beautiful Loading Screen&quot; src=&quot;/assets/wp-content/uploads/2015/05/beautiful_loading_screen.png&quot; alt=&quot;beautiful_loading_screen&quot; width=&quot;312&quot; height=&quot;413&quot; /&gt;&lt;/a&gt;
  
  &lt;p class=&quot;wp-caption-text&quot;&gt;
    Beautiful Loading Screen
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 26&#8230;Simple-Todo-App-With-Today-Extension</title>
   <link href="localhost:4000/2015/05/21/day-26-simple-todo-app-with-today-extension/"/>
   <updated>2015-05-21T00:00:00-07:00</updated>
   <id>localhost:4000/2015/05/21/day-26-simple-todo-app-with-today-extension</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: a simple todo app with today extension and Apple Watch extension. &lt;a href=&quot;https://github.com/vidaaudrey/026-Simple-Todo-App-With-Today-Extension&quot;&gt;Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The App, today extension and Apple Watch extension share the same code from custom Framework&lt;/li&gt;
&lt;li&gt;Share the same data across the app and extensions&lt;/li&gt;
&lt;li&gt;Open the detail todo item directly from today extension&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/05/snapshot3.gif&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-843&quot; src=&quot;/assets/wp-content/uploads/2015/05/snapshot3.gif&quot; alt=&quot;snapshot&quot; width=&quot;386&quot; height=&quot;698&quot; /&gt;&lt;img class=&quot;aligncenter size-full wp-image-842&quot; src=&quot;/assets/wp-content/uploads/2015/05/snapshot4.png&quot; alt=&quot;snapshot&quot; width=&quot;513&quot; height=&quot;680&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Known issue&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Somehow it seems the Apple Watch app does not co-exist with the today extension app. It does not run until I delete the today extension. Took me long time to realize&amp;#8230;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 23.. Swift Movie App</title>
   <link href="localhost:4000/2015/05/12/day-23-swift-movie-app/"/>
   <updated>2015-05-12T00:00:00-07:00</updated>
   <id>localhost:4000/2015/05/12/day-23-swift-movie-app</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt; a simple movie app that demonstrate how to get JSON data and dynamically create the corresponding class. &lt;a href=&quot;https://github.com/vidaaudrey/023-Popular-Movies&quot;&gt;Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/05/snapshot3.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-839&quot; src=&quot;/assets/wp-content/uploads/2015/05/snapshot3.png&quot; alt=&quot;snapshot&quot; width=&quot;372&quot; height=&quot;667&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;class Movie: NSObject {
    var id: Int = 0
    var originalTitle = &amp;quot;&amp;quot;
    var releaseDate = &amp;quot;&amp;quot;
    var posterPath = &amp;quot;&amp;quot;
    var title = &amp;quot;&amp;quot;
    var voteAverage:Float = 0
    var voteCount:Int = 0
    func getPosterURL() -&amp;amp;gt; String {
        return ALFrameworkConfig.TMDBImageURL + posterPath
    }
    
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;import UIKit
import ALFramework

class ViewController: UIViewController {

    @IBOutlet weak var tableView: UITableView!
    var dataSource:TableViewDataSource!
    var movies:[Movie] = []
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        dataSource = TableViewDataSource(items: movies, cellIdentifier: &amp;quot;cell&amp;quot;, cellActionHandler: nil, configureBlock: { (cell, item) -&amp;amp;gt; () in
            if let actualCell = cell as? MovieTableViewCell {
                actualCell.configCells(item as! Movie)
            }
        })
        tableView.dataSource = dataSource
        tableView.delegate = dataSource
        
        let url = ALFrameworkConfig.TMDBURLPopular + ALFrameworkConfig.TMDBKey
        ALUtils.getJSONObjectFromURL(url, callback: { (jsonData) -&amp;amp;gt; Void in
            
            if let jsonArr = jsonData[&amp;quot;results&amp;quot;] as? NSArray {
                for jsonDictData in jsonArr {
                    if let jsonDict = jsonDictData  as? NSDictionary {
                        // dynamically create movie class
                        let movie  = Movie.fromJSON(jsonDict)
                        self.movies.append(movie)
                    }
                    self.dataSource.items = self.movies
                    self.tableView.reloadData()
                }
                
            }
        })
        
    }

}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Links:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.weheartswift.com/swift-objc-magic/&quot;&gt;Swift + Objc = Magic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.themoviedb.apiary.io/#reference/movies/moviepopular/get&quot;&gt;Movie Data &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 22 &#8211; Apple Watch App &#8211; Coin Tossing</title>
   <link href="localhost:4000/2015/05/09/day-22-apple-watch-app-coin-tossing/"/>
   <updated>2015-05-09T00:00:00-07:00</updated>
   <id>localhost:4000/2015/05/09/day-22-apple-watch-app-coin-tossing</id>
   <content type="html">&lt;p&gt;An experiment on building Apple Watch App.&lt;a href=&quot;https://github.com/vidaaudrey/022-Apple-Watch-Tossing-Coin&quot;&gt; Source Code&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;/assets/wp-content/uploads/2015/05/snapshot2.png&quot;&gt;&lt;br&gt;
&lt;/a&gt; &lt;a href=&quot;/assets/wp-content/uploads/2015/05/snapshot2.gif&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-835&quot; src=&quot;/assets/wp-content/uploads/2015/05/snapshot2.gif&quot; alt=&quot;snapshot&quot; width=&quot;312&quot; height=&quot;415&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 21&#8230; Swift Drawing App</title>
   <link href="localhost:4000/2015/05/07/day-21-swift-drawing-app/"/>
   <updated>2015-05-07T00:00:00-07:00</updated>
   <id>localhost:4000/2015/05/07/day-21-swift-drawing-app</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: a simple drawing app. &lt;a href=&quot;https://github.com/vidaaudrey/021-Swift-Drawing-App&quot;&gt; Source Code&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Feature list&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Draw at the canvas&lt;/li&gt;
&lt;li&gt;Add and remove colors from palette&lt;/li&gt;
&lt;li&gt;Color Picker&lt;/li&gt;
&lt;li&gt;Set drawing data including lineWidth, Color, Opacity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/05/snapshot1.gif&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-829&quot; src=&quot;/assets/wp-content/uploads/2015/05/snapshot1.gif&quot; alt=&quot;snapshot&quot; width=&quot;372&quot; height=&quot;672&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.raywenderlich.com/87899/make-simple-drawing-app-uikit-swift&quot;&gt;Ref&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 20 &#8211; Swift Color Picker</title>
   <link href="localhost:4000/2015/05/02/day-020-swift-color-picker/"/>
   <updated>2015-05-02T00:00:00-07:00</updated>
   <id>localhost:4000/2015/05/02/day-020-swift-color-picker</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: a color picker for picking color(s) from views and images. &lt;a href=&quot;https://github.com/vidaaudrey/020-Swift-Color-Picker&quot;&gt;Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;UIImage and CALayer Extension to get pixel color at or near the touch point&lt;/li&gt;
&lt;li&gt;A custom color palette UIView to display the palette colors&lt;/li&gt;
&lt;li&gt;A custom color rect UIView to display the colors near the touch point&lt;/li&gt;
&lt;li&gt;A custom ColorRollView to display HSB colors&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/05/snapshot.gif&quot;&gt;&lt;img class=&quot;aligncenter wp-image-819 size-full&quot; src=&quot;/assets/wp-content/uploads/2015/05/snapshot.gif&quot; alt=&quot;snapshot&quot; width=&quot;376&quot; height=&quot;664&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/05/screenshot2.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-823&quot; src=&quot;/assets/wp-content/uploads/2015/05/screenshot2.png&quot; alt=&quot;screenshot2&quot; width=&quot;303&quot; height=&quot;533&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Links:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pNre/ExSwift/tree/master/ExSwift&quot;&gt;ExSwift&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://makeapppie.com/2014/10/08/swift-swift-using-uicolor-in-swift-part-2-making-a-color-palette-with-hsb/&quot;&gt;Making a color palette with HSB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/hacking-ios/uiimage-pixel-play-extension-in-swift-7c6fe90396b6&quot;&gt;UIImage pixel play extension in Swift&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.andrewcbancroft.com/2014/08/25/send-email-in-app-using-mfmailcomposeviewcontroller-with-swift/&quot;&gt;Send Email In-App – Using MFMailComposeViewController with Swift&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.designsnext.com/12-colorful-wallpapers-free/&quot;&gt;Photo Credit&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 19&#8230; Swift Lean ViewController &#8211;  Dribble Demo</title>
   <link href="localhost:4000/2015/04/29/day-19-swift-lean-viewcontroller-dribble-demo/"/>
   <updated>2015-04-29T00:00:00-07:00</updated>
   <id>localhost:4000/2015/04/29/day-19-swift-lean-viewcontroller-dribble-demo</id>
   <content type="html">&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;Description: an experiment on how to separate the viewController from tableViewDataSource while at the same time reduce the tableView interaction code. &lt;/span&gt;&lt;a href=&quot;https://github.com/vidaaudrey/019-Swift-Lean-ViewController-Dribble-Demo&quot; target=&quot;_blank&quot;&gt;Source Code&lt;/a&gt;
&lt;/p&gt;

&lt;p class=&quot;p1&quot;&gt;
  &lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot6.gif&quot;&gt;&lt;img class=&quot; size-full wp-image-800 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot6.gif&quot; alt=&quot;snapshot&quot; width=&quot;375&quot; height=&quot;683&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;I started out with the wish to write a rounded UIView extension, which was quite easy to achieve. Somehow along the way I decided to revisit the previous Dribble code and make some improvement:&lt;/p&gt;

&lt;p&gt;&amp;#8211; a separate TableView DataSource handles the data manipulation and give feedback to the main ViewController when the user interaction is performed. The ViewController can then perform the corresponding view updates or other actions. In fact, almost all actions that triggered by user interaction can use the same function to call back the main ViewController:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;func tableViewCellActionHandler(item: AnyObject, indexPath: NSIndexPath, action: TableViewActionType) {
        switch action {
        case .Edit:
            println(&amp;quot;editing&amp;quot;)
        case .Favoriate:
            favShots.append(item as! Shot)
            println(&amp;quot;faved&amp;quot;)
            tableView.setEditing(false, animated: true)
        case .Save:
            if let cell = tableView.cellForRowAtIndexPath(indexPath) as? ShotTableViewCell {
                if let image = cell.shotImageView?.image {
                    Utils.saveImageToLibrary(image)
                    tableView.setEditing(false, animated: true) // imp
                }
            }
        case .DidSelect:
            println(&amp;quot;selecting \(indexPath.row)&amp;quot;)
        case .DidDeselect:
           tableView.deselectRowAtIndexPath(indexPath, animated: true) // call it to make sure it does deselect. (Sometime, it doesn&amp;#39;t)
           println(&amp;quot;deselected \(indexPath.row)&amp;quot;)

        case .Delete:
            shots.removeAtIndex(indexPath.row)
        case .More:
            println(&amp;quot;More&amp;quot;)
        }
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The TableView Action types are custom defined:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;public enum TableViewActionType: String {
    case Edit  = &amp;quot;Edit&amp;quot;
    case Save = &amp;quot;Save&amp;quot;
    case More = &amp;quot;More&amp;quot;
    case Favoriate = &amp;quot;Favoriate&amp;quot;
    case Delete = &amp;quot;Delete&amp;quot;
    case DidSelect = &amp;quot;DidSelect&amp;quot;
    case DidDeselect = &amp;quot;DidDeselect&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;The rounded UIView extension which can be called easily with:  &lt;span class=&quot;s1&quot;&gt;userImageView&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;()&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;public extension UIView {
        public func round() {
        let width = bounds.width &amp;amp;lt; bounds.height ? bounds.width : bounds.height
        let mask = CAShapeLayer()
        mask.path = UIBezierPath(ovalInRect: bounds.rectByCentering(width, height: width)).CGPath
        self.layer.mask = mask
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 18 - Swift Currency Converter</title>
   <link href="localhost:4000/2015/04/29/018-swift-currency-converter/"/>
   <updated>2015-04-29T00:00:00-07:00</updated>
   <id>localhost:4000/2015/04/29/day-18-swift-currency-converter</id>
   <content type="html">&lt;div&gt;
  &lt;b&gt;Description&lt;/b&gt;: a currency converter.&lt;a href=&quot;https://github.com/vidaaudrey/018-Swift-Currency-Converter&quot; target=&quot;_blank&quot;&gt; Source Code&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;strong&gt;Features&lt;/strong&gt;:
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Simultaneously  update the target currency among while typing&lt;/li&gt;
&lt;li&gt;Add interested countries to the watch list&lt;/li&gt;
&lt;li&gt;Extensible (can add custom currency, inspired by &lt;a href=&quot;http://www.objc.io/issue-16/power-of-swift.html&quot;&gt;Chris Eidhof&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Encapsulate currency converting process in the CurrencyConverter Class which can be used as:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt; converter = CurrencyConverter(updateTimeInterval:2, exchangeRateUpdatedHandler: exchangeRateUpdatedHandler)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot7.gif&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-810&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot7.gif&quot; alt=&quot;snapshot&quot; width=&quot;376&quot; height=&quot;669&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot9.png&quot;&gt;&lt;img class=&quot; size-full wp-image-809 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot9.png&quot; alt=&quot;snapshot&quot; width=&quot;369&quot; height=&quot;662&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  Links:
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/naoty/SwiftCSV&quot;&gt;Swift CSV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fixer.io/&quot;&gt;Currency API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>018 Swift Currency Converter</title>
   <link href="localhost:4000/2015/04/29/018-swift-currency-converter/"/>
   <updated>2015-04-29T00:00:00-07:00</updated>
   <id>localhost:4000/2015/04/29/018-swift-currency-converter</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>Day 17..  &#8211; iOS Emoji Flags</title>
   <link href="localhost:4000/2015/04/24/day-17-ios-emoji-flags/"/>
   <updated>2015-04-24T00:00:00-07:00</updated>
   <id>localhost:4000/2015/04/24/day-17-ios-emoji-flags</id>
   <content type="html">&lt;p&gt;Description: a test to see the available emoji flags in iOS system. &lt;a title=&quot;iOS Emoji Flags Swift&quot; href=&quot;https://github.com/vidaaudrey/017-iOS-Emoji-Flags&quot; target=&quot;_blank&quot;&gt;Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot7.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-794&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot7.png&quot; alt=&quot;snapshot&quot; width=&quot;2048&quot; height=&quot;1536&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 16.. Swift Custom Transition</title>
   <link href="localhost:4000/2015/04/16/day-16-swift-custom-transition/"/>
   <updated>2015-04-16T00:00:00-07:00</updated>
   <id>localhost:4000/2015/04/16/day-16-swift-custom-transition</id>
   <content type="html">&lt;p&gt;Description: an iOS UIViewController custom transition demo. It supports transitions for all directions. The dismiss transition is a custom folding transition which is not perfect yet. &lt;a href=&quot;https://github.com/vidaaudrey/016-CustomTransitions&quot; target=&quot;_blank&quot;&gt;Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot14.png&quot;&gt;&lt;img class=&quot; size-full wp-image-791 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot14.png&quot; alt=&quot;snapshot1&quot; width=&quot;369&quot; height=&quot;657&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot5.gif&quot;&gt;&lt;img class=&quot; size-full wp-image-790 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot5.gif&quot; alt=&quot;snapshot&quot; width=&quot;375&quot; height=&quot;663&quot; /&gt;&lt;/a&gt;&lt;br&gt;
Inspired by an article from &lt;a href=&quot;http://www.appcoda.com/custom-view-controller-transitions-tutorial/&quot;&gt;AppCoda.com&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 15 &#8211; Swift Myers-Briggs Test</title>
   <link href="localhost:4000/2015/04/12/day-15-swift-myers-briggs-test/"/>
   <updated>2015-04-12T00:00:00-07:00</updated>
   <id>localhost:4000/2015/04/12/day-15-swift-myers-briggs-test</id>
   <content type="html">&lt;div&gt;
  &lt;strong&gt;Description&lt;/strong&gt;: A simple app that tests the personality types that is related sensation, intuition, feeling, and thinking. The data is based on the research by Katharine Cook Briggs and Isabel Briggs.  &lt;a href=&quot;https://github.com/vidaaudrey/015-Swift-Myers-Briggs-Test&quot;&gt;Source Code&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot4.gif&quot;&gt;&lt;img class=&quot; size-full wp-image-783 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot4.gif&quot; alt=&quot;snapshot&quot; width=&quot;400&quot; height=&quot;703&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot12.gif&quot;&gt;&lt;img class=&quot; size-full wp-image-784 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot12.gif&quot; alt=&quot;snapshot1&quot; width=&quot;400&quot; height=&quot;703&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;strong&gt;Functions and Features&lt;/strong&gt;:
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Random test question&lt;/li&gt;
&lt;li&gt;CustomUIView generated  by code&lt;/li&gt;
&lt;li&gt;CustomUIView generated by Storyboard&lt;/li&gt;
&lt;li&gt;Pass data between UIViewController and UIView using delegate and target-action pattern&lt;/li&gt;
&lt;li&gt;UIScrollView&lt;/li&gt;
&lt;li&gt;Programmatically add and update UIButton&lt;/li&gt;
&lt;li&gt;Use of Enum to define personality type&lt;/li&gt;
&lt;li&gt;UIView transition&lt;/li&gt;
&lt;li&gt;UIView animation&lt;/li&gt;
&lt;li&gt;Custom font&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 14&#8230; Five Ways to Pass Data in iOS and UITabBarController</title>
   <link href="localhost:4000/2015/04/10/day-14-five-ways-to-pass-data-in-ios-and-uitabbarcontroller/"/>
   <updated>2015-04-10T00:00:00-07:00</updated>
   <id>localhost:4000/2015/04/10/day-14-five-ways-to-pass-data-in-ios-and-uitabbarcontroller</id>
   <content type="html">&lt;div&gt;
  A demo that shows five ways to pass data between ViewControllers, including Segues in Storyboard, Delegate Pattern, Passing Blocks, Key-value Observation and NSNotification. &lt;a href=&quot;https://github.com/vidaaudrey/014-Five-Ways-To-Pass-Data-In-iOS-And-UITabBarController&quot;&gt;Source Code&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  Besides showing the data passing mechanism, other functions includes:
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Use PaintCode to draw the icons in the TabBar and UIView&lt;/li&gt;
&lt;li&gt;Explore PaintCode’s frame function and  scale the icons to different sizes&lt;/li&gt;
&lt;li&gt;Generate image using template mode and dynamically change the image / icon color&lt;/li&gt;
&lt;li&gt;Extended UIColor so it can be initiated with UIColor(color: UIColor, alpha: CGFloat)&lt;/li&gt;
&lt;li&gt;Explore TabBar and UITabBarController, including custom icon, system icon, badge, and “More” icon&lt;/li&gt;
&lt;li&gt; Keep consistent UIView in different orientation&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot3.gif&quot;&gt;&lt;img class=&quot; size-full wp-image-777 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot3.gif&quot; alt=&quot;snapshot&quot; width=&quot;382&quot; height=&quot;695&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot0.png&quot;&gt;&lt;img class=&quot; size-full wp-image-778 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot0.png&quot; alt=&quot;snapshot0&quot; width=&quot;663&quot; height=&quot;395&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot5.png&quot;&gt;&lt;img class=&quot; size-full wp-image-776 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot5.png&quot; alt=&quot;snapshot&quot; width=&quot;371&quot; height=&quot;667&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;strong&gt;Takeaways:&lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt; use viewDidLayoutSubviews to redraw the UIView&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  override func viewDidLayoutSubviews() {
&lt;/div&gt;

&lt;div&gt;
       super.viewDidLayoutSubviews()
&lt;/div&gt;

&lt;div&gt;
       iconView.frame = view.bounds
&lt;/div&gt;

&lt;div&gt;
       iconView.setNeedsDisplay()
&lt;/div&gt;

&lt;div&gt;
  }
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Use image.tintColor to redraw image with different UIColor&lt;/li&gt;
&lt;li&gt;Use UIApplication.sharedApplication().keyWindow?.tintColor to set global TintColor&lt;/li&gt;
&lt;li&gt;Use CGColorGetComponents(color.CGColor) to get the corresponding RGB value of the CGColor&lt;/li&gt;
&lt;li&gt;Use SegmentedControl’s valueChanged event to trigger Action&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 13&#8230; Swift &#8220;Hello, World&#8221; with UISearchBar and UISearchController</title>
   <link href="localhost:4000/2015/04/08/day-13-swift-hello-world-with-uisearchbar-and-uisearchcontroller/"/>
   <updated>2015-04-08T00:00:00-07:00</updated>
   <id>localhost:4000/2015/04/08/day-13-swift-hello-world-with-uisearchbar-and-uisearchcontroller</id>
   <content type="html">&lt;div&gt;
  A “Hello World” swift demo that shows greetings in different languages. The demo shows how to use UISearchController, UISearchBar and UISearchDisplay with UITableView and UICollectionView.&lt;a href=&quot;https://github.com/vidaaudrey/013-Hello-World-UISearchController-And-UISearchBar&quot; target=&quot;_blank&quot;&gt; Source Code&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot2.gif&quot;&gt;&lt;img class=&quot; size-full wp-image-770 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot2.gif&quot; alt=&quot;snapshot&quot; width=&quot;375&quot; height=&quot;691&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot21.gif&quot;&gt;&lt;img class=&quot; size-full wp-image-772 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot21.gif&quot; alt=&quot;snapshot2&quot; width=&quot;375&quot; height=&quot;691&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot11.gif&quot;&gt;&lt;img class=&quot; size-full wp-image-771 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot11.gif&quot; alt=&quot;snapshot1&quot; width=&quot;375&quot; height=&quot;691&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshort3.gif&quot;&gt;&lt;img class=&quot; size-full wp-image-768 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshort3.gif&quot; alt=&quot;snapshort3&quot; width=&quot;375&quot; height=&quot;691&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;strong&gt;Features&lt;/strong&gt;:
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;A new Material Design Color class called “MD”. (Use &amp;#8220;&lt;strong&gt;md.red[“P500”]&lt;/strong&gt;” to get the UIColor, and “&lt;strong&gt;md.random()&lt;/strong&gt;” to get some random Material Design UIColor.&lt;/li&gt;
&lt;li&gt;Separate DataSource and Delegate from UIViewController without compromising the UISearchController’s data update. Ref: GreetingNewViewController.swift&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;div&gt;
    &lt;strong&gt;Takeaways&lt;/strong&gt;:
  &lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;A search display controller “manages display of a search bar and a table view that displays the results of a search of data managed by another view controller.&amp;#8221;&lt;/li&gt;
&lt;li&gt;Remove UICollectionView top Padding: uncheck View Controller’s “Adjust Scroll View Insets&amp;#8221;&lt;/li&gt;
&lt;li&gt;Use “ resultSearchController.searchBar.becomeFirstResponder()” to set the TextField’s focus on the SearchBar.&lt;/li&gt;
&lt;li&gt;Filter the data:filteredData = data.filter{ $0.language.lowercaseString.rangeOfString(searchController.searchBar.text) != nil }&lt;/li&gt;
&lt;li&gt;Filter function does not work with multi-dimension array or dictionary yet. Be careful when to cast the data from AnyObject. Ref: GreetingNewViewController.swift&lt;/li&gt;
&lt;li&gt;When working with UIViewController with separated datasource class, reloadData() will not work until you manually updated the datasource as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;div&gt;
    &lt;strong&gt;Links&lt;/strong&gt;:
  &lt;/div&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&quot;http://en.wikipedia.org/wiki/Hello&quot;&gt;Wikipedia’s Hello Greeting List&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;http://import.io&quot;&gt;import.io&lt;/a&gt; for converting the wiki data into JSON data
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://github.com/lingoer/SwiftyJSON&quot;&gt;SwiftyJSON&lt;/a&gt; for making the JSON data processing like a breeze
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;http://www.raywenderlich.com/76519/add-table-view-search-swift&quot;&gt;Tut &lt;/a&gt;on how to use UISearchBar with UITableView
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 11 &#8211; Country Information (UICollectionView, UITableView and MapKit)</title>
   <link href="localhost:4000/2015/04/07/011-country-information-uicollectionview-uitableview-and-mapkit/"/>
   <updated>2015-04-07T00:00:00-07:00</updated>
   <id>localhost:4000/2015/04/07/011-country-information-uicollectionview-uitableview-and-mapkit</id>
   <content type="html">&lt;div&gt;
  A swift country information app that demos:
&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt; Separate UICollectionViewDataSource and UICollectionViewDelegate from UIViewController, for both single section datasource and multi-section datasource&lt;/li&gt;
&lt;li&gt;Handle Segue properly after the datasource separation&lt;/li&gt;
&lt;li&gt;How to parse and store JSON data&lt;/li&gt;
&lt;li&gt;How to use MapKit&lt;/li&gt;
&lt;li&gt;How to use Static Cell with UITableView&lt;/li&gt;
&lt;li&gt;Use PDF vector image&lt;/li&gt;
&lt;/ol&gt;

&lt;div&gt;
  &lt;a href=&quot;https://github.com/vidaaudrey/011-Country-Information&quot;&gt;Source Code&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot1.gif&quot;&gt;&lt;img class=&quot; size-full wp-image-760 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot1.gif&quot; alt=&quot;snapshot&quot; width=&quot;377&quot; height=&quot;684&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot12.png&quot;&gt;&lt;br /&gt; &lt;/a&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 12-Swift-Word-Color-Lean-UIViewController</title>
   <link href="localhost:4000/2015/04/05/day-12-swift-word-color-lean-uiviewcontroller/"/>
   <updated>2015-04-05T00:00:00-07:00</updated>
   <id>localhost:4000/2015/04/05/day-12-swift-word-color-lean-uiviewcontroller</id>
   <content type="html">&lt;div&gt;
  A simple demo that shows how to separate UITableViewDataSource and UICollectionViewDataSource from UIViewController. &lt;a href=&quot;https://github.com/vidaaudrey/012-Word-Color-Lean-UIViewController-UITableView-UICollectionView&quot;&gt;Source Code&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot1.png&quot;&gt;&lt;img class=&quot; size-full wp-image-752 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot1.png&quot; alt=&quot;snapshot&quot; width=&quot;380&quot; height=&quot;691&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot2.png&quot;&gt;&lt;img class=&quot; size-full wp-image-754 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot2.png&quot; alt=&quot;snapshot2&quot; width=&quot;383&quot; height=&quot;694&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;strong&gt;Steps:&lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Create DataSource class which implement UITableViewDataSource (Add UITaleViewDelegate if needed)&lt;/li&gt;
&lt;li&gt;Create the ViewController in the storyboard, add one prototype cell&lt;/li&gt;
&lt;li&gt;Create a CustomTableViewCell class, link the prototype cell to the class and further config the cell&lt;/li&gt;
&lt;li&gt;Add the ViewController class, initialize the UITableViewDataSource and assign it to the TableView in the storyboard&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 10.. Swift Material Design Color Palette</title>
   <link href="localhost:4000/2015/04/04/day-10-swift-material-design-color-palette/"/>
   <updated>2015-04-04T00:00:00-07:00</updated>
   <id>localhost:4000/2015/04/04/day-10-swift-material-design-color-palette</id>
   <content type="html">&lt;p&gt;A simple material design color palette that shows the palette colors upon selection.  &lt;a href=&quot;https://github.com/vidaaudrey/010-Swift-Material-Design-Color-Play&quot;&gt;Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot.gif&quot;&gt;&lt;img class=&quot; size-full wp-image-745 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot.gif&quot; alt=&quot;snapshot&quot; width=&quot;386&quot; height=&quot;702&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/04/snapshot.png&quot;&gt;&lt;img class=&quot; size-full wp-image-744 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/snapshot.png&quot; alt=&quot;snapshot&quot; width=&quot;372&quot; height=&quot;600&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/04/gridview.png&quot;&gt;&lt;img class=&quot; size-full wp-image-742 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/04/gridview.png&quot; alt=&quot;gridview&quot; width=&quot;373&quot; height=&quot;649&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Takeaways:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understand CollectionView and TableView, and how to use both in a single parent ViewController&lt;/li&gt;
&lt;li&gt;Programmatically deselect CollectionViewCells and animate accordingly (Only need two basic colors to generate the corresponding palette)&lt;/li&gt;
&lt;li&gt;How to parse XML file of material design colors to the target format. Ref ColorXMLParser.swift&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 8 &#8211; An iOS Clock Control UI with PaintCode</title>
   <link href="localhost:4000/2015/03/25/day-8-an-ios-clock-control-ui-with-paintcode/"/>
   <updated>2015-03-25T00:00:00-07:00</updated>
   <id>localhost:4000/2015/03/25/day-8-an-ios-clock-control-ui-with-paintcode</id>
   <content type="html">&lt;p&gt;Description: A simple clock UI that displays time and animates to target time.&lt;/p&gt;

&lt;p&gt;&lt;a title=&quot;Github Source Code &quot; href=&quot;https://github.com/vidaaudrey/008-Building-A-Clock-Control-Framework&quot; target=&quot;_blank&quot;&gt;Source Code&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;/assets/wp-content/uploads/2015/03/snapshot6.png&quot;&gt;&lt;img class=&quot; size-full wp-image-738 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/03/snapshot6.png&quot; alt=&quot;snapshot&quot; width=&quot;369&quot; height=&quot;667&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/03/snapshot4.gif&quot;&gt;&lt;img class=&quot; size-full wp-image-739 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/03/snapshot4.gif&quot; alt=&quot;snapshot&quot; width=&quot;375&quot; height=&quot;670&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 7 &#8211; Build a Weight Sensor Interface Using PaintCode</title>
   <link href="localhost:4000/2015/03/24/weight-sensor-interface-using-paintcode/"/>
   <updated>2015-03-24T00:00:00-07:00</updated>
   <id>localhost:4000/2015/03/24/weight-sensor-interface-using-paintcode</id>
   <content type="html">&lt;p&gt;A simple weight sensor UI interface using PaintCode.  &lt;a href=&quot;https://github.com/vidaaudrey/007-Weight-Sensor-Interface-Using-PaintCode&quot; target=&quot;_blank&quot;&gt;Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/03/snapshot5.png&quot;&gt;&lt;img class=&quot; size-full wp-image-729 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/03/snapshot5.png&quot; alt=&quot;snapshot&quot; width=&quot;370&quot; height=&quot;663&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/03/snapshot.gif&quot;&gt;&lt;img class=&quot; size-full wp-image-730 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/03/snapshot.gif&quot; alt=&quot;snapshot&quot; width=&quot;373&quot; height=&quot;668&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;strong&gt;Objective&lt;/strong&gt;:
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Learn how to use PaintCode&lt;/li&gt;
&lt;li&gt;Learn different types of UI Animation and how to incorporate it with PaintCode&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;strong&gt;Steps:&lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Draw the Pressure Sensor in PaintCode&lt;/li&gt;
&lt;li&gt;Set up the variables&lt;/li&gt;
&lt;li&gt;Import to Xcode and add animation&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;strong&gt;Notes and Takeaways:&lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;I was totally amazed by the flexibility of drawing with PaintCode. It saves so much time.&lt;/li&gt;
&lt;li&gt;Even better, combined with Xcode’s LiveView ability, you can design and layout the view without firing up the simulator.&lt;/li&gt;
&lt;li&gt;The code generated by PaintCode doesn’t really do the range checking by itself, which is a bit misleading since you’d think that that a “Fraction” in design phase would stay as a “Fraction” in Swift code as well.&lt;/li&gt;
&lt;li&gt;Great tool. I’ll definitely continue to use it. &lt;img class=&quot;alignnone size-full wp-image-728&quot; src=&quot;/assets/wp-content/uploads/2015/03/paintcode-screenshot.png&quot; alt=&quot;paintcode-screenshot&quot; width=&quot;1387&quot; height=&quot;953&quot; /&gt;&lt;img class=&quot;alignnone size-full wp-image-731&quot; src=&quot;/assets/wp-content/uploads/2015/03/xcodescreenshot.png&quot; alt=&quot;xcodescreenshot&quot; width=&quot;1390&quot; height=&quot;741&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  Ref: &lt;a href=&quot;http://www.paintcodeapp.com/tutorials&quot;&gt;http://www.paintcodeapp.com/tutorials&lt;/a&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 6 &#8211; Circular Image Loader Indicator</title>
   <link href="localhost:4000/2015/03/22/day-6-circular-image-loader-indicator/"/>
   <updated>2015-03-22T00:00:00-07:00</updated>
   <id>localhost:4000/2015/03/22/day-6-circular-image-loader-indicator</id>
   <content type="html">&lt;div&gt;
  Description: A circular image downloading process indicator.
&lt;/div&gt;

&lt;div&gt;
  Use: Create an UIImageView in storyboard and specify the class to be “CustomImageView&amp;#8221;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;a href=&quot;/assets/wp-content/uploads/2015/03/Snapshot.gif&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-721&quot; src=&quot;/assets/wp-content/uploads/2015/03/Snapshot.gif&quot; alt=&quot;Snapshot&quot; width=&quot;375&quot; height=&quot;670&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;strong&gt;Learn &lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Understand how to use NSURLSessionDelegate&lt;/li&gt;
&lt;li&gt;Create a custom view&lt;/li&gt;
&lt;li&gt;Animate custom view&lt;/li&gt;
&lt;li&gt;Work with CAShapeLayer and CAGradientLayer&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;strong&gt;Steps: &lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Follow and understand the &lt;a href=&quot;http://www.raywenderlich.com/94302/implement-circular-image-loader-animation-cashapelayer&quot;&gt;tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Replace the project’s image downloading library code. Ref &lt;a href=&quot;https://developer.apple.com/library/prerelease/mac/documentation/Foundation/Reference/NSURLSession_class/index.html&quot;&gt;NSURLSession&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Add label indicator in the center to show the progress&lt;/li&gt;
&lt;li&gt;Add gradient mask layer&lt;/li&gt;
&lt;li&gt;Minor update on the rest of the code&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;strong&gt;Takeaway:&lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;When the CircularLoaderView is initiated, the frame of the view is not yet conformed to the constraints of the superview. So the drawing of the child  views (in this case, the circular ring and the text in the middle) can not be placed in the right position. It has to be inside the layoutSubviews( ) function.&lt;/li&gt;
&lt;li&gt;When adding constraints programmatically, we have to be careful which one is the constraint&amp;#8217;s receiver. e.g. addConstraint(NSLayoutConstraint(item: self, attribute: .CenterX, relatedBy: .Equal, toItem: progressLabel, attribute: .CenterX, multiplier: 1.0, constant: 0.0))&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/Introduction/Introduction.html&quot;&gt;Autolayout Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;a href=&quot;https://github.com/vidaaudrey/006-Circular-Image-Loader-Indicator&quot; target=&quot;_blank&quot;&gt;Source Code&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
  Image Source:  &lt;a href=&quot;http://hdw.datawallpaper.com&quot;&gt;http://hdw.datawallpaper.com&lt;/a&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 5 &#8211; Circular Progress Loader Animation</title>
   <link href="localhost:4000/2015/03/22/day-5-circular-progress-loader-animation/"/>
   <updated>2015-03-22T00:00:00-07:00</updated>
   <id>localhost:4000/2015/03/22/day-5-circular-progress-loader-animation</id>
   <content type="html">&lt;p&gt;A highly customizable progress animation control.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/03/snapshot4.png&quot;&gt;&lt;img class=&quot; size-full wp-image-710 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/03/snapshot4.png&quot; alt=&quot;snapshot&quot; width=&quot;363&quot; height=&quot;612&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/assets/wp-content/uploads/2015/03/snapshot0.gif&quot;&gt;&lt;img class=&quot; size-full wp-image-711 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/03/snapshot0.gif&quot; alt=&quot;snapshot0&quot; width=&quot;412&quot; height=&quot;721&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/assets/wp-content/uploads/2015/03/snapshot1.gif&quot;&gt;&lt;br&gt;
&lt;/a&gt; &lt;a href=&quot;/assets/wp-content/uploads/2015/03/snapshot2.gif&quot;&gt;&lt;img class=&quot; size-full wp-image-713 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/03/snapshot2.gif&quot; alt=&quot;snapshot2&quot; width=&quot;412&quot; height=&quot;721&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/assets/wp-content/uploads/2015/03/snapshot3.gif&quot;&gt;&lt;img class=&quot; size-full wp-image-714 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/03/snapshot3.gif&quot; alt=&quot;snapshot3&quot; width=&quot;412&quot; height=&quot;721&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Use below code to programmatically create and customize the view, all parameters except the first &amp;#8220;frame&amp;#8221; can be nil.&lt;/p&gt;

&lt;p&gt;progressView = ProgressView(frame: rect, labelTextColor: UIColor.whiteColor(), labelFontSize: 30, labelFontName: nil, circleStrokeColors: colors, circleFillColor: nil, circleLineWidth: 15, strokeStartValue: nil, strokeEndValue:nil, loadText: &amp;#8220;Load View&amp;#8221;, loadingText: &amp;#8220;Loading&amp;#8221;, endLoadingText: &amp;#8220;Done&amp;#8221;)&lt;br&gt;
view.addSubview(progressView)&lt;br&gt;
progressView.animateProgressView()&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/vidaaudrey/005-Circular-Progress-Loader-Animation&quot; target=&quot;_blank&quot;&gt;Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code reference from &amp;#8220;&lt;a href=&quot;http://zappdesigntemplates.com/cashapelayer-to-create-a-custom-progressbar/&quot; target=&quot;_blank&quot;&gt;Use CAShapeLayer to create a custom progress bar in iO&lt;/a&gt;&lt;a href=&quot;http://zappdesigntemplates.com/cashapelayer-to-create-a-custom-progressbar/&quot; target=&quot;_blank&quot;&gt;S&lt;/a&gt;&amp;#8220;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 4 &#8211; Face Change with iOS Custom Control</title>
   <link href="localhost:4000/2015/03/19/day-4-face-change-with-ios-custom-control/"/>
   <updated>2015-03-19T00:00:00-07:00</updated>
   <id>localhost:4000/2015/03/19/day-4-face-change-with-ios-custom-control</id>
   <content type="html">&lt;h3&gt;Objective&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Learn how custom control works&lt;/li&gt;
&lt;li&gt;Learn how to draw shapes and images in UIView&lt;/li&gt;
&lt;li&gt;Learn how to pass data with Delegation and Target-Action&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;a href=&quot;/assets/wp-content/uploads/2015/03/Face-Change.gif&quot;&gt;&lt;img class=&quot; size-full wp-image-704 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/03/Face-Change.gif&quot; alt=&quot;Face-Change&quot; width=&quot;404&quot; height=&quot;714&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/assets/wp-content/uploads/2015/03/snapshot.png&quot;&gt;&lt;img class=&quot; size-full wp-image-705 aligncenter&quot; src=&quot;/assets/wp-content/uploads/2015/03/snapshot.png&quot; alt=&quot;snapshot&quot; width=&quot;370&quot; height=&quot;666&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;h3&gt;Steps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Follow the &lt;a href=&quot;http://www.raywenderlich.com/76433/how-to-make-a-custom-control-swift&quot;&gt;tutorial &lt;/a&gt; and create a custom slider&lt;/li&gt;
&lt;li&gt;Add a target which can be controlled by the slider. In this case, it’s another UIView &amp;#8211; FaceView&lt;/li&gt;
&lt;li&gt;Create the datasource delegate protocol  for the FaceView and implement it in the main controller&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;h3&gt;Takeaway:&lt;/h3&gt;

&lt;div&gt;
  1. CGGeometry:&lt;a href=&quot;http://nshipster.com/cggeometry/&quot;&gt; http://nshipster.com/cggeometry/&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
  2. Shortcuts &lt;a href=&quot;http://nshipster.com/xcode-key-bindings-and-gestures/&quot;&gt;http://nshipster.com/xcode-key-bindings-and-gestures/&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;div&gt;
  &lt;/div&gt;
  
  &lt;div&gt;
  &lt;/div&gt;
  
  &lt;div&gt;
    Source code at &lt;a title=&quot;Face Change with iOS Custom Control&quot; href=&quot;https://github.com/vidaaudrey/004-Face-Change-With-iOS-Custom-Control&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 3&#8230;  &#8211; A Dribble Client Demo</title>
   <link href="localhost:4000/2015/03/17/day-3-a-dribble-client-demo/"/>
   <updated>2015-03-17T00:00:00-07:00</updated>
   <id>localhost:4000/2015/03/17/day-3-a-dribble-client-demo</id>
   <content type="html">&lt;p&gt;Inspired by a tutorial, I decided to follow through and spend some time learning and refining the code.&lt;/p&gt;

&lt;p&gt;The sample code is at &lt;a title=&quot;Dribble Client App&quot; href=&quot;https://github.com/vidaaudrey/003-Dribble-Client&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/03/snapshot1.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-695&quot; src=&quot;/assets/wp-content/uploads/2015/03/snapshot1.png&quot; alt=&quot;snapshot1&quot; width=&quot;392&quot; height=&quot;707&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/03/snapshot3.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-697&quot; src=&quot;/assets/wp-content/uploads/2015/03/snapshot3.png&quot; alt=&quot;snapshot3&quot; width=&quot;392&quot; height=&quot;706&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/03/snapshot2.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-696&quot; src=&quot;/assets/wp-content/uploads/2015/03/snapshot2.png&quot; alt=&quot;snapshot2&quot; width=&quot;390&quot; height=&quot;704&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;The original tutorial is by AppDesignVault.&lt;a href=&quot; https://youtu.be/MtcscjMxxq4?list=PL4ihBheGxq3d-MqLokNQHbH82qMzMdTUZ&quot; target=&quot;_blank&quot;&gt; View the videos from Youtube&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 2 &#8211; iOS App Internationalization &#8211; A Simple Multi-lingo Greeting App</title>
   <link href="localhost:4000/2015/03/14/day-2-ios-app-internationalization-a-simple-multi-lingo-greeting-app/"/>
   <updated>2015-03-14T00:00:00-07:00</updated>
   <id>localhost:4000/2015/03/14/day-2-ios-app-internationalization-a-simple-multi-lingo-greeting-app</id>
   <content type="html">&lt;div&gt;
  I wanted to start something that is related to 3D perspective with Sketch today but somehow I got interested in App Internationalization while watching a little WWDC video. So I decided to build a simple multi-lingo app to test some ideas.
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  I was excited about the possibilities of the app functions and got really excited. But I am also fully aware of my skills and knowledge level.
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;div class=&#39;et_post_video&#39;&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;a href=&#39;https://github.com/vidaaudrey/002-Swift-Multilingo-Greeting&#39; class=&#39;small-button smallorange&#39;&gt;Source Code&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;b&gt;Thoughts&lt;/b&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;The App will not be complicated but enough to demonstrate the fundamentals of internationalization&lt;/li&gt;
&lt;li&gt;Greetings in different languages should be fun&lt;/li&gt;
&lt;li&gt;Maybe some audio greeting as well&lt;/li&gt;
&lt;li&gt;There are many others things that I can do, but this is literally my first mini App with Swift. I should just focus on the core value of my project today which is to learn iOS internationalization basics&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;b&gt; &lt;/b&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;b&gt;Objective &lt;/b&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Learn internationalization of Interface strings, programmatically generated strings, image assets, audio files&lt;/li&gt;
&lt;li&gt;Learn how to handle translation files&lt;/li&gt;
&lt;li&gt;Learn Sketch export to speed up development&lt;/li&gt;
&lt;li&gt;Preview and debug in translated languages&lt;/li&gt;
&lt;li&gt;How to process right-to-left language&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;b&gt;Steps&lt;/b&gt;
&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;A simple design in Sketch&lt;/li&gt;
&lt;li&gt;Setup Github&lt;/li&gt;
&lt;li&gt;Layout Storyboard, put together the basic App in English&lt;/li&gt;
&lt;li&gt;Add localized strings&lt;/li&gt;
&lt;li&gt;Process the translation file. Personally I found &lt;a href=&quot;http://xliff.brightec.co.uk/form.php&quot;&gt;Brightec.com&lt;/a&gt; quite useful and handy. But with this project, it’s not necessary. All strings can be easily added via Xcode.&lt;/li&gt;
&lt;li&gt;Add localized images. Use the “Localized String” approach to localize images. (The asset image does not support localization so well).&lt;/li&gt;
&lt;li&gt;Programmatically switch language and region. First I thought it was too much trouble. Normally users can do it from the system setting. Later I found a solution in Stackoverflow.com which is to  get files from the respective language folders.&lt;/li&gt;
&lt;li&gt;Add localized audio files&lt;/li&gt;
&lt;li&gt;Refine Autolayout to support multiple devices

&lt;ol&gt;
&lt;li&gt;Other use of NSLocalizedString &amp;amp; best practice  — &amp;gt; check next time&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div&gt;
    &lt;a href=&quot;/assets/wp-content/uploads/2015/03/sketch-design.png&quot;&gt;&lt;img class=&quot;size-full wp-image-689&quot; src=&quot;/assets/wp-content/uploads/2015/03/sketch-design.png&quot; alt=&quot;sketch design  (quite different from the final result )&quot; width=&quot;750&quot; height=&quot;1334&quot; /&gt;&lt;/a&gt;

    &lt;a href=&quot;/assets/wp-content/uploads/2015/03/how-nice-sketch-support-folder-export.png&quot;&gt;&lt;img class=&quot;size-full wp-image-684&quot; src=&quot;/assets/wp-content/uploads/2015/03/how-nice-sketch-support-folder-export.png&quot; alt=&quot;how nice sketch support folder export&quot; width=&quot;536&quot; height=&quot;681&quot; /&gt;&lt;/a&gt;
    
 
  
    &lt;a href=&quot;/assets/wp-content/uploads/2015/03/image-assets.png&quot;&gt;&lt;img class=&quot;size-full wp-image-682&quot; src=&quot;/assets/wp-content/uploads/2015/03/image-assets.png&quot; alt=&quot;Xcode manages image assets very nicely&quot; width=&quot;1124&quot; height=&quot;796&quot; /&gt;&lt;/a&gt;

  
    &lt;a href=&quot;/assets/wp-content/uploads/2015/03/first-version-in-english.png&quot;&gt;&lt;img class=&quot;size-full wp-image-687&quot; src=&quot;/assets/wp-content/uploads/2015/03/first-version-in-english.png&quot; alt=&quot;first version in english&quot; width=&quot;373&quot; height=&quot;690&quot; /&gt;&lt;/a&gt;
 
  
    &lt;a href=&quot;/assets/wp-content/uploads/2015/03/my-headach-in-landscape.png&quot;&gt;&lt;img class=&quot;size-full wp-image-683&quot; src=&quot;/assets/wp-content/uploads/2015/03/my-headach-in-landscape.png&quot; alt=&quot;my headache in landscape view&quot; width=&quot;664&quot; height=&quot;379&quot; /&gt;&lt;/a&gt;
 
  
    &lt;a href=&quot;/assets/wp-content/uploads/2015/03/autolayout-and-constrains.png&quot;&gt;&lt;img class=&quot;size-full wp-image-688&quot; src=&quot;/assets/wp-content/uploads/2015/03/autolayout-and-constrains.png&quot; alt=&quot;autolayout and constrains&quot; width=&quot;880&quot; height=&quot;783&quot; /&gt;&lt;/a&gt;
  
  
    &lt;a href=&quot;/assets/wp-content/uploads/2015/03/snapshortcn.png&quot;&gt;&lt;img class=&quot;size-full wp-image-686&quot; src=&quot;/assets/wp-content/uploads/2015/03/snapshortcn.png&quot; alt=&quot;App in my mother tongue &quot; width=&quot;416&quot; height=&quot;712&quot; /&gt;&lt;/a&gt;
  
  
    &lt;a href=&quot;/assets/wp-content/uploads/2015/03/second-version-with-multi-lingo-support.png&quot;&gt;&lt;img class=&quot;size-full wp-image-685&quot; src=&quot;/assets/wp-content/uploads/2015/03/second-version-with-multi-lingo-support.png&quot; alt=&quot;second version with multi-lingo support&quot; width=&quot;371&quot; height=&quot;686&quot; /&gt;&lt;/a&gt;


&lt;div&gt;
  &lt;b&gt;Lesson Learned&lt;/b&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Autolayout is such a headache and I spent a lot of time adjusting different devices, landscape and portrait. I had to give up landscape option at the end. I can shift locations, but simply too much to manage the compact height. Next time if the project is easy, perhaps I can quietly sit down and adjust one by one.&lt;/li&gt;
&lt;li&gt;Sketch made the export process like an easy breeze.&lt;/li&gt;
&lt;li&gt;Somehow Xcode can not located the m4a file that I recorded with Quicktime player. Mp3 files are ok. Later I learned that m4a files don’t get automatically copied to Build Resources. Need to add manually.&lt;/li&gt;
&lt;li&gt;In Xcode 6, you can actually export and import XLIFF (&lt;a href=&quot;https://en.wikipedia.org/wiki/XLIFF&quot; rel=&quot;nofollow&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/XLIFF&quot;&gt;https://en.wikipedia.org/wiki/XLIFF&lt;/a&gt;&lt;/a&gt;) files&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;b&gt;Nice-to-have functions for the future version:&lt;/b&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Add right-to-left support // good to have with more complicated layout.&lt;/li&gt;
&lt;li&gt;Show progress when playing the audio&lt;/li&gt;
&lt;li&gt;Add an audio database with different audio samples.&lt;/li&gt;
&lt;li&gt;Users can listen to a group of audio samples in one language&lt;/li&gt;
&lt;li&gt;Allow users randomly submit language audios&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;b&gt;Bug needs fix:&lt;/b&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Showing nil when adding additional ViewControllers.&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;strong&gt;Further Reading &lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Internationalization and localization of Apps in Xcode 6 and Swift  &lt;a href=&quot;http://rshankar.com/internationalization-and-localization-of-apps-in-xcode-6-and-swift/&quot;&gt;http://rshankar.com/internationalization-and-localization-of-apps-in-xcode-6-and-swift/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How to record audio files in Mac: &lt;a href=&quot;http://www.mactip.net/how-to-record-sound-on-a-mac/&quot;&gt;http://www.mactip.net/how-to-record-sound-on-a-mac/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 1 &#8211;  New Start. AngularJS Todo List with Material Design</title>
   <link href="localhost:4000/2015/03/13/day-1-new-start-angularjs-todo-list-with-material-design/"/>
   <updated>2015-03-13T00:00:00-07:00</updated>
   <id>localhost:4000/2015/03/13/day-1-new-start-angularjs-todo-list-with-material-design</id>
   <content type="html">&lt;p&gt;Last night I couldn&amp;#8217;t quite sleep. A problem has been bothering me for long time: whether I can and whether I should change profession?&lt;/p&gt;

&lt;p&gt;After university graduation, I completely abandoned my Computer Science degree and became a real estate agent, thinking I needed some social touch. After two years, I dived into market research and PR for some very strange reasons, maybe partly because the very unknown has been great attraction for me.&lt;/p&gt;

&lt;p&gt;PR has been fun for me and I always thought it&amp;#8217;s a great idea to continue, possibly a life-time profession. Until a few months ago, I suddenly realized the direction is not going to lead me anywhere in the Bay area.  What was working in Beijing simply does not work here.&lt;/p&gt;

&lt;p&gt;I was defeated, frustrated and lost for quite some time since then. But now I am glad that I found something that I always felt passionate about &amp;#8211; technology. I could belittle myself in so many ways in this area, lack of education (did not really start hard), no experience, no community, and most importantly no idea where to start!&lt;/p&gt;

&lt;p&gt;But, what the hell. I&amp;#8217;ll never learn anything if I don&amp;#8217;t try. So here, I am starting my 100-Day Project and see how far I can go.&lt;/p&gt;

&lt;p&gt;//Enough of the background talk&lt;/p&gt;

&lt;h3&gt;Objective&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Learn Github basics&lt;/li&gt;
&lt;li&gt;Learn AngularJS fundamentals&lt;/li&gt;
&lt;li&gt;Understand the Material Design basics&lt;/li&gt;
&lt;li&gt;Create a simple responsive web App that can capture the above 3 aspects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#39;https://github.com/vidaaudrey/001-Angular-Material-Todo-App&#39; class=&#39;small-button smallorange&#39; target=&quot;_blank&quot;&gt;Source Code&lt;/a&gt; &lt;a href=&#39;https://vidaaudrey.github.io/001-Angular-Material-Todo-App/&#39; class=&#39;small-button smallorange&#39; target=&quot;_blank&quot;&gt;Demo Page&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;Steps&lt;/h3&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Prepare&lt;/strong&gt; 

&lt;ul&gt;
&lt;li&gt;Get todo list inspirations from Dribble and have some idea about final product: &lt;a href=&quot;https://dribbble.com/shots/1639604-Conceptual-To-Do-List/attachments/256511&quot;&gt;https://dribbble.com/shots/1639604-Conceptual-To-Do-List/attachments/256511&lt;/a&gt; .  I realize that a lot of time when we focus too much on technology, we forget about the design and user experience. What we build may not look like the same, but it&amp;#8217;s great to keep in mind what could be potentially possible.&lt;/li&gt;
&lt;li&gt;Understand some basics of &lt;a href=&quot;http://www.google.com/design/spec/material-design/introduction.html&quot; title=&quot;Material Design&quot;&gt;material design&lt;/a&gt; and &lt;a href=&quot;https://angularjs.org/&quot; title=&quot;AngularJS&quot;&gt;AngularJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Development Setup&lt;/strong&gt;. I use pretty standard mainstream tools: Sublime for editing and Bower to manage packages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Github Setup&lt;/strong&gt;. Create a new repository and follow the instructions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clone “Material-Start” Project&lt;/strong&gt;.  &lt;a href=&quot;https://github.com/angular/material-start.git&quot;&gt;https://github.com/angular/material-start.git&lt;/a&gt; It&amp;#8217;s a useful starter project and greatly reduce the development time. I love the theme and icon configuration. It makes code much cleaner and easy to manage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Start Local Server&lt;/strong&gt;. Use http-server -a localhost -p 8000 to start a local server. There are many other ways to do it, such as Python, Node, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wire up the basic Todo List function &lt;/strong&gt;by referring Angular website: &lt;a href=&quot;https://angularjs.org/&quot;&gt;https://angularjs.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add Material Design&lt;/strong&gt; flexible layout and other elements&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create a SVG icon&lt;/strong&gt; to be used as “Add&amp;#8221;. It&amp;#8217;s my first time creating and using SVG file. It&amp;#8217;s quite easy with Sketch.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Craft the Look&lt;/strong&gt;. Material design has a set of rules about colors and layouts. Angular Material already offered good implementation. The color reference is pretty handy: &lt;a href=&quot;https://material.angularjs.org/#/Theming/01_introduction&quot;&gt;https://material.angularjs.org/#/Theming/01_introduction&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;Push the first design version to Github.&lt;/li&gt;
&lt;li&gt;Create a Github page. Ref: &lt;a href=&quot;https://help.github.com/articles/creating-project-pages-manually/&quot;&gt;https://help.github.com/articles/creating-project-pages-manually/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/03/Angular-Material-Start-Project.png&quot;&gt;&lt;img class=&quot;wp-image-667 size-full&quot; src=&quot;/assets/wp-content/uploads/2015/03/Angular-Material-Start-Project.png&quot; alt=&quot;Angular Material Start Project&quot; width=&quot;1100&quot; height=&quot;764&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/03/Basic-setup.png&quot;&gt;&lt;img class=&quot;wp-image-669 size-full&quot; src=&quot;/assets/wp-content/uploads/2015/03/Basic-setup.png&quot; alt=&quot;Basic setup&quot; width=&quot;765&quot; height=&quot;587&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/03/Sketch.png&quot;&gt;&lt;img class=&quot;wp-image-671 size-full&quot; src=&quot;/assets/wp-content/uploads/2015/03/Sketch.png&quot; alt=&quot;Sketch&quot; width=&quot;1267&quot; height=&quot;765&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/03/Input-State-Change.png&quot;&gt;&lt;img class=&quot;wp-image-670 size-full&quot; src=&quot;/assets/wp-content/uploads/2015/03/Input-State-Change.png&quot; alt=&quot;Input State Change&quot; width=&quot;648&quot; height=&quot;920&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/wp-content/uploads/2015/03/Angular-Material-Todo-App.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-668&quot; src=&quot;/assets/wp-content/uploads/2015/03/Angular-Material-Todo-App.png&quot; alt=&quot;Angular Material Todo App&quot; width=&quot;654&quot; height=&quot;874&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;div&gt;
    &lt;em&gt;— Further Reading &amp;#8212;&lt;/em&gt;
  &lt;/div&gt;
  
  &lt;div&gt;
    GitHub For Beginners: Don&amp;#8217;t Get Scared, Get Started    &lt;a href=&quot;http://readwrite.com/2013/09/30/understanding-github-a-journey-for-beginners-part-1&quot;&gt;http://readwrite.com/2013/09/30/understanding-github-a-journey-for-beginners-part-1&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div&gt;
    Great Intro Video: &lt;a href=&quot;https://youtu.be/0fKg7e37bQE&quot;&gt;https://youtu.be/0fKg7e37bQE&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div&gt;
    Github: &lt;a href=&quot;http://stackoverflow.com/questions/10298291/cannot-push-to-github-keeps-saying-need-merge&quot;&gt;http://stackoverflow.com/questions/10298291/cannot-push-to-github-keeps-saying-need-merge&lt;/a&gt;
  &lt;/div&gt;
  
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Welcome to Jekyll!</title>
   <link href="localhost:4000/jekyll/2014/03/03/welcome-to-jekyll/"/>
   <updated>2014-03-03T00:00:00-08:00</updated>
   <id>localhost:4000/jekyll/2014/03/03/welcome-to-jekyll</id>
   <content type="html">&lt;p&gt;You&amp;rsquo;ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory - edit this post and re-build
(or run with the &lt;code&gt;-w&lt;/code&gt; switch) to see your changes! To add new posts, simply add
a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention:
YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We&amp;rsquo;ve also added a lot of different settings for &lt;a href=&quot;https://github.com/vmg/redcarpet&quot;&gt;Redcarpet&lt;/a&gt;,
including being able to &lt;sup&gt;superscript,&lt;/sup&gt; &lt;u&gt;underline&lt;/u&gt;, &lt;mark&gt;highlight&lt;/mark&gt;,
&lt;del&gt;strikethrough&lt;/del&gt;, and footnotes.&lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; It even automatically makes links into
URLs: &lt;a href=&quot;http://www.jekyllrb.com&quot;&gt;www.jekyllrb.com&lt;/a&gt; and you can put multiple underscores in words without
them leaning all over the place: this_word_has_underscores. It&amp;rsquo;ll also make your
quotes look nice, like this: &amp;ldquo;hoho&amp;rdquo;, your dashes and hypens will be dashing too:
&amp;mdash;/&amp;ndash;.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;def print_hi(name)
  puts &amp;quot;Hi, #{name}&amp;quot;
end
print_hi(&amp;#39;Tom&amp;#39;)
#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of
Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&amp;rsquo;s GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;Who are quite handy&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Introducing Poole</title>
   <link href="localhost:4000/jekyll/poole/2014/03/02/introducing-poole/"/>
   <updated>2014-03-02T00:00:00-08:00</updated>
   <id>localhost:4000/jekyll/poole/2014/03/02/introducing-poole</id>
   <content type="html">&lt;p&gt;&lt;em&gt;The Strange Case of Dr. Jeykll and Mr. Hyde&lt;/em&gt; tells the story of a lawyer
investigating the connection of two persons, Dr. Henry Jekyll and Mr. Edward
Hyde. Chief among the novel&amp;rsquo;s supporting cast is a man by the name of Mr. Poole,
Dr. Jekyll&amp;rsquo;s loyal butler.
&amp;lt;!&amp;ndash;more&amp;ndash;&amp;gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Poole is the butler for &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;, the static site
generator. It&amp;rsquo;s designed and developed by &lt;a href=&quot;https://twitter.com/mdo&quot;&gt;@mdo&lt;/a&gt; to
provide a clear and concise foundational setup for any Jekyll site. It does so
by furnishing a full vanilla Jekyll install with example templates, pages,
posts, and styles.&lt;/p&gt;

&lt;p&gt;There are currently two themes built on Poole:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://hyde.getpoole.com&quot;&gt;Hyde&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lanyon.getpoole.com&quot;&gt;Lanyon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&quot;https://github.com/poole&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;What&amp;rsquo;s included&lt;/h3&gt;

&lt;p&gt;Poole is a streamlined Jekyll site designed and built as a foundation for
building more meaningful themes. Poole, and every theme built on it, includes
the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complete Jekyll setup included (layouts, config, &lt;a href=&quot;/404&quot;&gt;404&lt;/a&gt;, &lt;a href=&quot;/atom.xml&quot;&gt;RSS
feed&lt;/a&gt;, posts, and &lt;a href=&quot;/about&quot;&gt;example page&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Mobile friendly design and development&lt;/li&gt;
&lt;li&gt;Easily scalable text and component sizing with &lt;code&gt;rem&lt;/code&gt; units in the CSS&lt;/li&gt;
&lt;li&gt;Support for a wide gamut of HTML elements&lt;/li&gt;
&lt;li&gt;Related posts (time-based, because Jekyll) below each post&lt;/li&gt;
&lt;li&gt;Syntax highlighting, courtesy Pygments (the Python-based code snippet
highlighter)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additional features are available in individual themes.&lt;/p&gt;

&lt;h3&gt;Browser support&lt;/h3&gt;

&lt;p&gt;Poole and it&amp;rsquo;s themes are by preference a forward-thinking project. In addition
to the latest versions of Chrome, Safari (mobile and desktop), and Firefox, it
is only compatible with Internet Explorer 9 and above.&lt;/p&gt;

&lt;h3&gt;Download&lt;/h3&gt;

&lt;p&gt;Poole is developed on and hosted with GitHub. Head to the &lt;a
href=&quot;https://github.com/poole/poole&quot;&gt;GitHub repository&lt;/a&gt; for downloads, bug
reports, and features requests.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="localhost:4000/jekyll/example/2014/03/01/2014-03-01-example-content/"/>
   <updated>2014-03-01T00:00:00-08:00</updated>
   <id>localhost:4000/jekyll/example/2014/03/01/2014-03-01-example-content</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  Howdy! This is an example blog post that shows several types of HTML content supported in this theme.
&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
&lt;li&gt;Citations, like &lt;cite&gt;&amp;mdash; Mark otto&lt;/cite&gt;, should use &lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;// Example can be run directly in your JavaScript console

// Create a function that takes two arguments and returns the sum of those arguments
var adder = new Function(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;return a + b&amp;quot;);

// Call the function
adder(2, 6);
// &amp;gt; 8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3&gt;Gists via GitHub Pages&lt;/h3&gt;

&lt;p&gt;Vestibulum id ligula porta felis euismod semper. Nullam quis risus eget urna mollis ornare vel eu leo. Donec sed odio dui.&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/5555251.js?file=gist.md&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Nullam quis risus eget urna mollis ornare vel eu leo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec sed odio dui. Vestibulum id ligula porta felis euismod semper.&lt;/p&gt;

&lt;h3&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
&lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
&lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
&lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
&lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My Top Resources to Learn Spanish</title>
   <link href="localhost:4000/2014/02/21/my-top-resources-to-learn-spanish/"/>
   <updated>2014-02-21T00:00:00-08:00</updated>
   <id>localhost:4000/2014/02/21/my-top-resources-to-learn-spanish</id>
   <content type="html">&lt;p&gt;Spanish, using as a native language by approximately 406 million people in the world, is the second only to Mandarin in terms of its number of native speakers worldwide.  It&amp;#8217;s a passionate language and is fun to learn. Below are some top resources that I found:&lt;/p&gt;

&lt;p&gt;&lt;strong style=&quot;line-height: 1.5em;&quot;&gt;&lt;a title=&quot;http://www.michelthomas.com/learn-spanish.php&quot; href=&quot;http://www.michelthomas.com/learn-spanish.php&quot; target=&quot;_blank&quot;&gt;Michel Thomas Learn Spanish&lt;/a&gt;&lt;/strong&gt;&lt;span style=&quot;line-height: 1.5em;&quot;&gt;: my #1 course to start whenever I try to learn a new language. There are basic, advanced, vocabulary and language builder courses available. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a title=&quot;https://itunes.apple.com/gb/app/busuu-learn-languages-for/id379968583?mt=8&quot; href=&quot;https://itunes.apple.com/gb/app/busuu-learn-languages-for/id379968583?mt=8&quot; target=&quot;_blank&quot;&gt;Busuu&lt;/a&gt;&lt;/strong&gt; for iPhone: great app with different levels. Love the vocabulary, dialogue and test functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a title=&quot;http://itunes.apple.com/us/app/learn-spanish-levels-i-ii/id301734424?mt=8&quot; href=&quot;http://itunes.apple.com/us/app/learn-spanish-levels-i-ii/id301734424?mt=8&quot; target=&quot;_blank&quot;&gt;Learn Spanish Levels I &amp;amp; II with Bueno, entonces&lt;/a&gt;&lt;/strong&gt; : as described in apple store &amp;#8220;Bueno, entonces&amp;#8230; is an intensive 5-week Spanish immersion course disguised as an addictive TV series&amp;#8221;, learning Spanish by following funny romantic conversation. Love it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a title=&quot;https://itunes.apple.com/us/app/learn-spanish-by-mindsnacks/id385497068?mt=8&quot; href=&quot;https://itunes.apple.com/us/app/learn-spanish-by-mindsnacks/id385497068?mt=8&quot; target=&quot;_blank&quot;&gt;Learn Spanish by MindSnacks&lt;/a&gt;&lt;/strong&gt;: great if you like to learn while playing games.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a title=&quot;BBC Learn Spanish&quot; href=&quot;http://www.bbc.co.uk/languages/spanish/mividaloca/ &quot; target=&quot;_blank&quot;&gt;BBC Learn Spanish&lt;/a&gt;&lt;/strong&gt;: wonderful videos and tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a title=&quot;http://www.babbel.com/&quot; href=&quot;http://www.babbel.com/&quot; target=&quot;_blank&quot;&gt;Babbel&lt;/a&gt;&lt;/strong&gt;: great online interactive courses with social features. Make friends with people around the world who like to learn other languages as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Youtube video channels&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a dir=&quot;ltr&quot; title=&quot;E-ducation.it&quot; href=&quot;https://www.youtube.com/user/EducationMobile&quot; data-sessionlink=&quot;ei=IkkHU67hIIfNmQW7t4CACQ&quot;&gt;E-ducation.it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a dir=&quot;ltr&quot; title=&quot;tv294&quot; href=&quot;https://www.youtube.com/user/tv294&quot; data-sessionlink=&quot;ei=rkkHU-D4Haa_mQWj8IGIDg&quot;&gt;tv294&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a dir=&quot;ltr&quot; title=&quot;Lets Learn Spanish&quot; href=&quot;https://www.youtube.com/user/learnspanishvideos&quot; data-sessionlink=&quot;ei=IUkHU4GSEIfamAXy2oDYDg&quot;&gt;Lets Learn Spanish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a dir=&quot;ltr&quot; title=&quot;Learn Spanish&quot; href=&quot;https://www.youtube.com/user/learnspanish1&quot; data-sessionlink=&quot;ei=IEkHU52JG82WmQXasYDQBA&quot;&gt;Learn Spanish&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And if you are more advanced, download &lt;strong&gt;&lt;a title=&quot;http://www.booksshouldbefree.com/language/Spanish&quot; href=&quot;http://www.booksshouldbefree.com/language/Spanish&quot; target=&quot;_blank&quot;&gt;these free audio books&lt;/a&gt;&lt;/strong&gt; to your iTune and listen. If you are in Beijing, sign up in the courses from &lt;strong&gt;&lt;a title=&quot;http://pekin.cervantes.es/cn/courses_spanish/spanish_courses.htm&quot; href=&quot;http://pekin.cervantes.es/cn/courses_spanish/spanish_courses.htm&quot; target=&quot;_blank&quot;&gt;Institudo Cervantes&lt;/a&gt;.&lt;/strong&gt; All teachers are native Spanish, and very strict&amp;#8230;&lt;/p&gt;

&lt;p&gt;¡Buena suerte!&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</content>
 </entry>
 

</feed>
